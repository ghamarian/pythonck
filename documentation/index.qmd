---
title: "Composable-Kernels Python Documentation"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

# PythonCK: Python Implementation of Composable Kernels

Welcome to PythonCK, a Python implementation of tensor operations and concepts from the AMD Composable Kernels library. This package provides educational implementations that focus on clarity and understanding rather than performance.

## 🎓 **Recommended Learning Path**

**New to PythonCK?** Follow our structured learning path to understand all concepts:

### **[📚 Complete Learning Path](concepts/learning-path.qmd)**
A step-by-step guide that builds from basic concepts to advanced GPU thread coordination, culminating in understanding the complete `tile_distr_thread_mapping.py` example.

## 📖 **Learning by Topic**

### 1. **Foundation Concepts**
- [Buffer Views](concepts/buffer-view.qmd) - Memory buffer abstraction
- [Tensor Coordinates](concepts/tensor-coordinate.qmd) - Multi-dimensional indexing
- [Tensor Descriptors](concepts/tensor-descriptor.qmd) - Layout transformations
- [Tensor Views](concepts/tensor-view.qmd) - Unified tensor access

### 2. **Distribution Concepts**
- [Tile Distribution Encoding](concepts/tile-distribution-encoding.qmd) - How data is distributed
- [Tile Distribution](concepts/tile-distribution.qmd) - Parallel processing coordination
- [Static Distributed Tensors](concepts/static-distributed-tensor.qmd) - Thread-local data

### 3. **Advanced Operations**
- [Tile Windows](concepts/tile-window.qmd) - Windowed tensor access
- [Sweep Operations](concepts/sweep-tile.qmd) - Iterating over distributed data
- [Thread Mapping](concepts/thread-mapping.qmd) - Understanding the complete pipeline

## 📦 **Package Structure**

```
pytensor/                    # Core tensor operations
├── buffer_view.py          # Memory abstraction
├── tensor_coordinate.py    # Multi-dimensional indexing
├── tensor_descriptor.py    # Layout transformations  
├── tensor_view.py          # Unified access interface
├── tile_distribution.py    # Data distribution
├── tile_window.py          # Windowed access
├── sweep_tile.py           # Coordinated iteration
└── ...

tensor_transforms/          # Analysis tools
├── parser.py              # Descriptor parsing
├── analyzer.py            # Transformation analysis
└── ...

tile_distribution/          # Visualization tools
├── parser.py              # C++ encoding parsing
├── visualizer.py          # Interactive visualization
└── ...
```

## 🔑 **Key Concepts**

**PythonCK** implements several interconnected concepts:

1. **Tensors** are multi-dimensional arrays with flexible layouts
2. **Coordinates** provide multi-dimensional indexing with transformations
3. **Distributions** define how data is spread across parallel processing elements
4. **Tiles** represent chunks of data processed by individual threads/warps
5. **Sweeps** iterate over distributed data in a coordinated manner

The ultimate goal is understanding how GPU threads coordinate to process large tensors efficiently, as demonstrated in the complete example at `tile_distr_thread_mapping.py`.

## 🚀 **Quick Start**

Jump right in with interactive examples:

```{pyodide}
#| echo: true
#| output: true

# PythonCK is now available - let's explore!
import pytensor
from pytensor.tensor_coordinate import MultiIndex, TensorCoordinate

# Create a simple multi-dimensional index
multi_idx = MultiIndex(3, [2, 1, 0])
print(f"3D index: {multi_idx}")

# Create a tensor coordinate
coord = TensorCoordinate(multi_idx)
print(f"Tensor coordinate: {coord}")

print("✅ PythonCK is ready for exploration!")
```

## 🎯 **Learning Paths**

Choose your learning approach:

- **🎓 [Structured Path](concepts/learning-path.qmd)** - Follow the complete 10-step progression
- **🔍 [Concept-Driven](concepts/buffer-view.qmd)** - Explore individual concepts as needed
- **💻 [Code-First](api/index.qmd)** - Jump into the API documentation
- **🎮 [Interactive](tutorials/index.qmd)** - Try hands-on tutorials

## ✨ **Interactive Features**

This documentation includes:

- 🏃 **Live Code Execution** - Run Python code directly in your browser
- 📱 **Responsive Design** - Works on desktop and mobile
- 🌓 **Dark/Light Mode** - Toggle between themes
- 🔍 **Full-Text Search** - Find what you need quickly
- 📋 **Copy Code** - One-click code copying
- 🔗 **Deep Linking** - Share links to specific sections

---

*Ready to dive deeper? Start with our [Complete Learning Path](concepts/learning-path.qmd) or jump to any concept that interests you.*