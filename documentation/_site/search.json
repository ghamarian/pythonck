[
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Welcome to the PythonCK tutorials! These step-by-step guides will help you understand the core concepts and learn how to use the library effectively.\n\n\n\n\n\n\n\n\nLet’s import the necessary modules:\n\n\n\n\n\n\n\n\n\nTensor coordinates are the foundation of how we address multi-dimensional data:\n\n\n\n\n\n\n\n\n\nTensor descriptors provide metadata about tensor layout and properties:\n\n\n\n\n\n\n\n\n\nBuffer views provide low-level control over memory access patterns:\n\n\n\n\n\n\n\n\n\nLearn how data is organized and processed in tiles:\n\n\n\n\n\n\n\n\n\nExplore how tensor adaptors enable complex transformations:\n\n\n\n\n\n\n\n\n\nNow that you’ve learned the basics, explore specific concepts in detail:\n\nTensor Adaptor - Deep dive into tensor transformations\nTile Operations - Advanced tiling strategies\nBuffer Management - Memory access optimization\n\n\n\n\nTry modifying the examples above! Change the tensor dimensions, tile sizes, or transformation types to see how the system behaves. All code runs directly in your browser, so feel free to experiment.\n\n\n\nHere are some common usage patterns you’ll encounter:\n\nCreating multi-dimensional coordinates for indexing\nSetting up tile distributions for parallel processing\nApplying tensor adaptors for data transformations\nManaging buffer views for memory optimization\n\nEach concept builds on the previous ones, creating a powerful framework for GPU kernel development.",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#setup",
    "href": "tutorials/index.html#setup",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Let’s import the necessary modules:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#tutorial-1-understanding-tensor-coordinates",
    "href": "tutorials/index.html#tutorial-1-understanding-tensor-coordinates",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Tensor coordinates are the foundation of how we address multi-dimensional data:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#tutorial-2-working-with-tensor-descriptors",
    "href": "tutorials/index.html#tutorial-2-working-with-tensor-descriptors",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Tensor descriptors provide metadata about tensor layout and properties:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#tutorial-3-buffer-views-and-memory-access",
    "href": "tutorials/index.html#tutorial-3-buffer-views-and-memory-access",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Buffer views provide low-level control over memory access patterns:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#tutorial-4-tile-based-operations",
    "href": "tutorials/index.html#tutorial-4-tile-based-operations",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Learn how data is organized and processed in tiles:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#tutorial-5-advanced-tensor-transformations",
    "href": "tutorials/index.html#tutorial-5-advanced-tensor-transformations",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Explore how tensor adaptors enable complex transformations:",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#next-steps",
    "href": "tutorials/index.html#next-steps",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Now that you’ve learned the basics, explore specific concepts in detail:\n\nTensor Adaptor - Deep dive into tensor transformations\nTile Operations - Advanced tiling strategies\nBuffer Management - Memory access optimization",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#interactive-experimentation",
    "href": "tutorials/index.html#interactive-experimentation",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Try modifying the examples above! Change the tensor dimensions, tile sizes, or transformation types to see how the system behaves. All code runs directly in your browser, so feel free to experiment.",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "tutorials/index.html#common-patterns",
    "href": "tutorials/index.html#common-patterns",
    "title": "Getting Started with PythonCK",
    "section": "",
    "text": "Here are some common usage patterns you’ll encounter:\n\nCreating multi-dimensional coordinates for indexing\nSetting up tile distributions for parallel processing\nApplying tensor adaptors for data transformations\nManaging buffer views for memory optimization\n\nEach concept builds on the previous ones, creating a powerful framework for GPU kernel development.",
    "crumbs": [
      "Getting Started",
      "Getting Started with PythonCK"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html",
    "href": "concepts/tensor-coordinate.html",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "Tensor coordinates are the foundation for navigating multi-dimensional tensor spaces in PythonCK. They provide a systematic way to address elements in tensors and handle coordinate transformations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe MultiIndex class represents a coordinate in multi-dimensional space:\n\n\n\n\n\n\nYou can modify coordinates and perform operations:\n\n\n\n\n\n\n\n\n\nTensorAdaptorCoordinate tracks coordinates through transformations using hidden dimensions:\n\n\n\n\n\n\n\n\n\nTensorCoordinate extends TensorAdaptorCoordinate for common tensor operations:\n\n\n\n\n\n\n\n\n\nLet’s simulate accessing elements in a 4x6 matrix using tensor coordinates:\n\n\n\n\n\n\n\n\n\nCoordinates can be transformed as you move through different tensor operations:\n\n\n\n\n\n\n\n\n\n\nMultiIndex: Basic multi-dimensional coordinate representation\nHidden Dimensions: Internal coordinate space that enables transformations\nTop/Bottom Mapping: How visible tensor dimensions map to internal coordinates\nLinear Offset: Final memory address for element access\n\nTensor coordinates provide the foundation for all other PythonCK operations by giving you precise control over how multi-dimensional data is addressed and transformed.\n\n\n\n\nTensor Descriptor - Learn how tensor layouts are described\nTensor Adaptor - Explore coordinate transformations\nBuffer View - See how coordinates map to memory access",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#multiindex-basic-multi-dimensional-indexing",
    "href": "concepts/tensor-coordinate.html#multiindex-basic-multi-dimensional-indexing",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "The MultiIndex class represents a coordinate in multi-dimensional space:\n\n\n\n\n\n\nYou can modify coordinates and perform operations:",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#tensoradaptorcoordinate-transformation-aware-coordinates",
    "href": "concepts/tensor-coordinate.html#tensoradaptorcoordinate-transformation-aware-coordinates",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "TensorAdaptorCoordinate tracks coordinates through transformations using hidden dimensions:",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#tensorcoordinate-simplified-tensor-addressing",
    "href": "concepts/tensor-coordinate.html#tensorcoordinate-simplified-tensor-addressing",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "TensorCoordinate extends TensorAdaptorCoordinate for common tensor operations:",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#practical-example-matrix-access-patterns",
    "href": "concepts/tensor-coordinate.html#practical-example-matrix-access-patterns",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "Let’s simulate accessing elements in a 4x6 matrix using tensor coordinates:",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#coordinate-transformations",
    "href": "concepts/tensor-coordinate.html#coordinate-transformations",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "Coordinates can be transformed as you move through different tensor operations:",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#key-concepts",
    "href": "concepts/tensor-coordinate.html#key-concepts",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "MultiIndex: Basic multi-dimensional coordinate representation\nHidden Dimensions: Internal coordinate space that enables transformations\nTop/Bottom Mapping: How visible tensor dimensions map to internal coordinates\nLinear Offset: Final memory address for element access\n\nTensor coordinates provide the foundation for all other PythonCK operations by giving you precise control over how multi-dimensional data is addressed and transformed.",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "concepts/tensor-coordinate.html#next-steps",
    "href": "concepts/tensor-coordinate.html#next-steps",
    "title": "Tensor Coordinates",
    "section": "",
    "text": "Tensor Descriptor - Learn how tensor layouts are described\nTensor Adaptor - Explore coordinate transformations\nBuffer View - See how coordinates map to memory access",
    "crumbs": [
      "Core Concepts",
      "Tensor Coordinates"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "PythonCK is a Python implementation of Composable Kernels tensor operations, providing a high-level interface for understanding and experimenting with GPU tensor computations.\n\n\nComposable Kernels (CK) is a performance portable programming model for writing high performance GPU kernels for machine learning workloads across multiple architectures including GCDCore, CDNA, RDNA architectures, and various other GPU architectures.\nThis Python implementation allows you to:\n\nUnderstand the core concepts behind tensor operations\nExperiment with tensor transformations interactively\nVisualize how data flows through different tensor operations\nLearn GPU kernel design patterns\n\n\n\n\n\n\n\n\n\n\nLet’s start with a simple tensor coordinate example:\n\n\n\n\n\n\n\n\n\n\n\n\nTensor Adaptor - The foundation for tensor transformations\nTensor Descriptor - Describes tensor layout and properties\nBuffer View - Low-level memory access patterns\nTensor Coordinate - Multi-dimensional indexing\n\n\n\n\n\nTile Distribution - How data is distributed across tiles\nTile Window - Windowed access to tile data\nShuffle Tile - Data rearrangement operations\nSweep Tile - Iterative tile processing\n\n\n\n\n\nStatic Distributed Tensor - Compile-time optimized tensors\nSpace Filling Curves - Advanced memory access patterns\n\n\n\n\n\n\nTutorials - Step-by-step guides\nAPI Reference - Complete API documentation\nInteractive Examples - All code examples are runnable in your browser!\n\n\n\n\n\n🏃 Live Code Execution - Run Python code directly in your browser\n📱 Responsive Design - Works on desktop and mobile\n🌓 Dark/Light Mode - Toggle between themes\n🔍 Full-Text Search - Find what you need quickly\n📋 Copy Code - One-click code copying\n🔗 Deep Linking - Share links to specific sections\n\n\nReady to dive in? Start with our Getting Started Tutorial or explore specific concepts.",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "index.html#what-is-composable-kernels",
    "href": "index.html#what-is-composable-kernels",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "Composable Kernels (CK) is a performance portable programming model for writing high performance GPU kernels for machine learning workloads across multiple architectures including GCDCore, CDNA, RDNA architectures, and various other GPU architectures.\nThis Python implementation allows you to:\n\nUnderstand the core concepts behind tensor operations\nExperiment with tensor transformations interactively\nVisualize how data flows through different tensor operations\nLearn GPU kernel design patterns",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "index.html#quick-example",
    "href": "index.html#quick-example",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "Let’s start with a simple tensor coordinate example:",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "index.html#key-concepts",
    "href": "index.html#key-concepts",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "Tensor Adaptor - The foundation for tensor transformations\nTensor Descriptor - Describes tensor layout and properties\nBuffer View - Low-level memory access patterns\nTensor Coordinate - Multi-dimensional indexing\n\n\n\n\n\nTile Distribution - How data is distributed across tiles\nTile Window - Windowed access to tile data\nShuffle Tile - Data rearrangement operations\nSweep Tile - Iterative tile processing\n\n\n\n\n\nStatic Distributed Tensor - Compile-time optimized tensors\nSpace Filling Curves - Advanced memory access patterns",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "Tutorials - Step-by-step guides\nAPI Reference - Complete API documentation\nInteractive Examples - All code examples are runnable in your browser!",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "index.html#features-of-this-documentation",
    "href": "index.html#features-of-this-documentation",
    "title": "Composable-Kernels Python Documentation",
    "section": "",
    "text": "🏃 Live Code Execution - Run Python code directly in your browser\n📱 Responsive Design - Works on desktop and mobile\n🌓 Dark/Light Mode - Toggle between themes\n🔍 Full-Text Search - Find what you need quickly\n📋 Copy Code - One-click code copying\n🔗 Deep Linking - Share links to specific sections\n\n\nReady to dive in? Start with our Getting Started Tutorial or explore specific concepts.",
    "crumbs": [
      "Getting Started",
      "Composable-Kernels Python Documentation"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html",
    "href": "concepts/buffer-view.html",
    "title": "Buffer Views",
    "section": "",
    "text": "Buffer views provide low-level memory access abstractions in PythonCK, supporting different address spaces and memory access patterns common in GPU computing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate different types of buffer views for various memory spaces:\n\n\n\n\n\n\n\n\n\nBuffer views support various access patterns with bounds checking:\n\n\n\n\n\n\n\n\n\nBuffer views support vectorized read and write operations:\n\n\n\n\n\n\n\n\n\nDifferent types of memory operations are supported:\n\n\n\n\n\n\n\n\n\nDifferent address spaces can be used for different memory hierarchies:\n\n\n\n\n\n\n\n\n\nBuffer views provide flexible handling of invalid or out-of-bounds accesses:\n\n\n\n\n\n\n\n\n\nLet’s use buffer views to implement a simple matrix tile operation:\n\n\n\n\n\n\n\n\n\nUse the factory function for convenient buffer creation:\n\n\n\n\n\n\n\n\n\n\nAddress Spaces: Different memory hierarchies (Global, LDS, VGPR)\nVectorized Access: Efficient multi-element operations\nBounds Checking: Safe memory access with invalid element handling\nMemory Operations: SET, ADD, ATOMIC operations\nGPU Memory Model: Abstractions for GPU memory hierarchies\n\nBuffer views provide the low-level foundation for efficient tensor operations by abstracting memory access patterns and supporting GPU-specific memory hierarchies.\n\n\n\n\nTensor Descriptor - Learn how tensors use buffer views\nTile Operations - See buffer views in tile-based processing\nTensor Coordinate - Understand coordinate to memory mapping",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#basic-buffer-creation",
    "href": "concepts/buffer-view.html#basic-buffer-creation",
    "title": "Buffer Views",
    "section": "",
    "text": "Create different types of buffer views for various memory spaces:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#memory-access-patterns",
    "href": "concepts/buffer-view.html#memory-access-patterns",
    "title": "Buffer Views",
    "section": "",
    "text": "Buffer views support various access patterns with bounds checking:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#vectorized-access",
    "href": "concepts/buffer-view.html#vectorized-access",
    "title": "Buffer Views",
    "section": "",
    "text": "Buffer views support vectorized read and write operations:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#memory-operations",
    "href": "concepts/buffer-view.html#memory-operations",
    "title": "Buffer Views",
    "section": "",
    "text": "Different types of memory operations are supported:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#address-space-types",
    "href": "concepts/buffer-view.html#address-space-types",
    "title": "Buffer Views",
    "section": "",
    "text": "Different address spaces can be used for different memory hierarchies:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#invalid-element-handling",
    "href": "concepts/buffer-view.html#invalid-element-handling",
    "title": "Buffer Views",
    "section": "",
    "text": "Buffer views provide flexible handling of invalid or out-of-bounds accesses:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#practical-example-matrix-tile-operations",
    "href": "concepts/buffer-view.html#practical-example-matrix-tile-operations",
    "title": "Buffer Views",
    "section": "",
    "text": "Let’s use buffer views to implement a simple matrix tile operation:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#buffer-view-factory",
    "href": "concepts/buffer-view.html#buffer-view-factory",
    "title": "Buffer Views",
    "section": "",
    "text": "Use the factory function for convenient buffer creation:",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#key-concepts",
    "href": "concepts/buffer-view.html#key-concepts",
    "title": "Buffer Views",
    "section": "",
    "text": "Address Spaces: Different memory hierarchies (Global, LDS, VGPR)\nVectorized Access: Efficient multi-element operations\nBounds Checking: Safe memory access with invalid element handling\nMemory Operations: SET, ADD, ATOMIC operations\nGPU Memory Model: Abstractions for GPU memory hierarchies\n\nBuffer views provide the low-level foundation for efficient tensor operations by abstracting memory access patterns and supporting GPU-specific memory hierarchies.",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "concepts/buffer-view.html#next-steps",
    "href": "concepts/buffer-view.html#next-steps",
    "title": "Buffer Views",
    "section": "",
    "text": "Tensor Descriptor - Learn how tensors use buffer views\nTile Operations - See buffer views in tile-based processing\nTensor Coordinate - Understand coordinate to memory mapping",
    "crumbs": [
      "Core Concepts",
      "Buffer Views"
    ]
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Complete reference documentation for all PythonCK modules and classes.\n\n\n\n\nThe main tensor operations module containing all core functionality.\n\ntensor_coordinate - Multi-dimensional coordinate handling\ntensor_descriptor - Tensor layout and metadata\ntensor_adaptor - Tensor transformations and adaptations\ntensor_view - Views and slicing operations\nbuffer_view - Low-level memory access patterns\n\n\n\n\n\n\ntile_distribution - Data distribution across tiles\ntile_distribution_encoding - Encoding schemes for tile distribution\ntile_window - Windowed access to tile data\ntile_window_linear - Linear tile window operations\ntile_window_utils - Utility functions for tile windows\n\n\n\n\n\nshuffle_tile - Data shuffling and rearrangement\nsweep_tile - Iterative tile processing\nstore_tile - Tile storage operations\nupdate_tile - In-place tile updates\ntile_scatter_gather - Scatter/gather operations\n\n\n\n\n\nstatic_distributed_tensor - Compile-time optimized tensors\nspace_filling_curve - Advanced memory access patterns\nstatic_encoding_pattern - Static encoding strategies\n\n\n\n\n\n\nHigher-level transformation utilities and examples.\n\nanalyzer - Tensor operation analysis\nparser - Parsing tensor expressions\nexamples - Common transformation patterns\n\n\n\n\nAdvanced tile distribution strategies and visualization.\n\nparser - Tile distribution parsing\nvisualizer - Tile distribution visualization\nexamples - Tile distribution examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClass\nPurpose\nKey Methods\n\n\n\n\nTensorCoordinate\nMulti-dimensional indexing\n__init__(), get_element_count()\n\n\nTensorDescriptor\nTensor metadata\ncalculate_offset(), get_strides()\n\n\nTensorAdaptor\nTensor transformations\ntransform_coordinate(), get_output_shape()\n\n\nBufferView\nMemory access patterns\ngenerate_access_sequence()\n\n\nTileDistribution\nTile-based processing\nget_tile_coordinates(), get_num_tiles()\n\n\nTileWindow\nWindowed tile access\nget_window_data(), slide_window()\n\n\n\n\nFor detailed documentation of each module, click on the links above. Each page includes:\n\nClass definitions with full method signatures\nUsage examples with runnable code\nParameter descriptions and return values\nRelated concepts and cross-references",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#core-tensor-operations",
    "href": "api/index.html#core-tensor-operations",
    "title": "API Reference",
    "section": "",
    "text": "The main tensor operations module containing all core functionality.\n\ntensor_coordinate - Multi-dimensional coordinate handling\ntensor_descriptor - Tensor layout and metadata\ntensor_adaptor - Tensor transformations and adaptations\ntensor_view - Views and slicing operations\nbuffer_view - Low-level memory access patterns",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#tile-operations",
    "href": "api/index.html#tile-operations",
    "title": "API Reference",
    "section": "",
    "text": "tile_distribution - Data distribution across tiles\ntile_distribution_encoding - Encoding schemes for tile distribution\ntile_window - Windowed access to tile data\ntile_window_linear - Linear tile window operations\ntile_window_utils - Utility functions for tile windows",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#specialized-tile-operations",
    "href": "api/index.html#specialized-tile-operations",
    "title": "API Reference",
    "section": "",
    "text": "shuffle_tile - Data shuffling and rearrangement\nsweep_tile - Iterative tile processing\nstore_tile - Tile storage operations\nupdate_tile - In-place tile updates\ntile_scatter_gather - Scatter/gather operations",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#advanced-features",
    "href": "api/index.html#advanced-features",
    "title": "API Reference",
    "section": "",
    "text": "static_distributed_tensor - Compile-time optimized tensors\nspace_filling_curve - Advanced memory access patterns\nstatic_encoding_pattern - Static encoding strategies",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#utilities",
    "href": "api/index.html#utilities",
    "title": "API Reference",
    "section": "",
    "text": "Higher-level transformation utilities and examples.\n\nanalyzer - Tensor operation analysis\nparser - Parsing tensor expressions\nexamples - Common transformation patterns\n\n\n\n\nAdvanced tile distribution strategies and visualization.\n\nparser - Tile distribution parsing\nvisualizer - Tile distribution visualization\nexamples - Tile distribution examples",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#quick-reference",
    "href": "api/index.html#quick-reference",
    "title": "API Reference",
    "section": "",
    "text": "Class\nPurpose\nKey Methods\n\n\n\n\nTensorCoordinate\nMulti-dimensional indexing\n__init__(), get_element_count()\n\n\nTensorDescriptor\nTensor metadata\ncalculate_offset(), get_strides()\n\n\nTensorAdaptor\nTensor transformations\ntransform_coordinate(), get_output_shape()\n\n\nBufferView\nMemory access patterns\ngenerate_access_sequence()\n\n\nTileDistribution\nTile-based processing\nget_tile_coordinates(), get_num_tiles()\n\n\nTileWindow\nWindowed tile access\nget_window_data(), slide_window()\n\n\n\n\nFor detailed documentation of each module, click on the links above. Each page includes:\n\nClass definitions with full method signatures\nUsage examples with runnable code\nParameter descriptions and return values\nRelated concepts and cross-references",
    "crumbs": [
      "API Reference",
      "API Reference"
    ]
  }
]