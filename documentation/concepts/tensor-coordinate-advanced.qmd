---
title: "Advanced Coordinate Operations"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Import required classes
from pytensor.tensor_coordinate import MultiIndex, make_tensor_coordinate, make_tensor_adaptor_coordinate, move_tensor_coordinate, adaptor_coordinate_is_valid, coordinate_has_valid_offset
from pytensor.tensor_descriptor import make_naive_tensor_descriptor, TensorAdaptor, EmbedTransform, UnmergeTransform
```

**Prerequisites**: [Tensor Descriptors](tensor-descriptor.qmd), [Tensor Coordinates](tensor-coordinate.qmd), [Tensor Adaptors](tensor-adaptor.qmd), [Tensor Adaptor Coordinates](tensor-adaptor-coordinate.qmd)

Advanced coordinate operations require understanding of **Tensor Descriptors**, **Tensor Coordinates**, **Tensor Adaptors**, and **Tensor Adaptor Coordinates**. These operations enable:

- **Create** coordinates from descriptors and adaptors
- **Move** coordinates through transform chains
- **Convert** between different coordinate spaces
- **Check** if operations are valid in the current descriptor context

## üèóÔ∏è **Coordinate Creation from Descriptors and Adaptors**

### make_tensor_coordinate: Descriptor-Based Creation

Creates coordinates from tensor descriptors:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import make_tensor_coordinate
from pytensor.tensor_descriptor import make_naive_tensor_descriptor
from pytensor.tensor_coordinate import MultiIndex

# Create a tensor descriptor (defines the tensor layout)
lengths = [4, 6]  # 4x6 matrix
strides = [6, 1]  # Row-major layout
descriptor = make_naive_tensor_descriptor(lengths, strides)

# Create coordinate from descriptor and user index
user_index = MultiIndex(2, [1, 2])  # Row 1, Column 2
coord = make_tensor_coordinate(descriptor, user_index)

print(f"User index: {user_index.to_list()}")
print(f"Created coordinate: {coord}")
print(f"Top index: {coord.get_index().to_list()}")
print(f"Linear offset: {coord.get_offset()}")
print("‚úÖ Descriptor-based coordinate creation")
```

### make_tensor_adaptor_coordinate: Adaptor-Based Creation

Creates coordinates from tensor adaptors (more general than descriptors):

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import make_tensor_adaptor_coordinate
from pytensor.tensor_descriptor import TensorAdaptor, EmbedTransform

# Create a tensor adaptor with transformations
embed_transform = EmbedTransform([4, 6], [6, 1])  # 4x6 ‚Üí linear

# Create TensorAdaptor with correct constructor signature
adaptor = TensorAdaptor(
    transforms=[embed_transform],
    lower_dimension_hidden_idss=[[0]],  # Transform outputs to hidden dim 0
    upper_dimension_hidden_idss=[[1, 2]],  # Transform takes from hidden dims 1,2
    bottom_dimension_hidden_ids=[0],  # Bottom dimension is hidden dim 0
    top_dimension_hidden_ids=[1, 2]  # Top dimensions are hidden dims 1,2
)

# Create coordinate from adaptor and top index
top_index = MultiIndex(2, [2, 3])  # 4x6 coordinate
adaptor_coord = make_tensor_adaptor_coordinate(adaptor, top_index)

print(f"Top index (4x6): {adaptor_coord.get_top_index().to_list()}")
print(f"Bottom index (linear): {adaptor_coord.get_bottom_index().to_list()}")
print(f"Hidden index: {adaptor_coord.get_hidden_index().to_list()}")
print("‚úÖ Adaptor-based coordinate creation")
```

### Key Differences: Descriptor vs Adaptor Creation

**make_tensor_coordinate:**
- Takes TensorDescriptor
- Always creates TensorCoordinate
- Bottom dimension is single offset
- Simpler, tensor-specific

**make_tensor_adaptor_coordinate:**
- Takes TensorAdaptor
- Creates TensorAdaptorCoordinate
- Can have multiple bottom dimensions
- More general, flexible

**Relationship:**
- `make_tensor_coordinate()` calls `make_tensor_adaptor_coordinate()` internally
- then converts result to TensorCoordinate

## üö® **Why Descriptors Are Required**

Many coordinate operations need to:
- **Validate** if a coordinate is within bounds after transformation
- **Move** coordinates through transform chains
- **Convert** between different coordinate spaces
- **Check** if operations are valid in the current descriptor context

## üîÑ **move_tensor_coordinate: Descriptor-Aware Movement**

The most important function that requires descriptors:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import make_tensor_coordinate, move_tensor_coordinate
from pytensor.tensor_descriptor import make_naive_tensor_descriptor
from pytensor.tensor_coordinate import MultiIndex

# First create a tensor descriptor (required!)
lengths = [4, 6]  # 4x6 matrix
strides = [6, 1]  # Row-major layout
descriptor = make_naive_tensor_descriptor(lengths, strides)

# Create initial coordinate
initial_idx = MultiIndex(2, [1, 2])  # Row 1, Column 2
coord = make_tensor_coordinate(descriptor, initial_idx)

print(f"Initial coordinate: {coord.get_index()}")
print(f"Initial position: {coord.get_index().to_list()}")

# Move by offset - this uses descriptor for validation!
offset = MultiIndex(2, [0, 1])  # Move 1 column right
move_tensor_coordinate(descriptor, coord, offset)

print(f"After move: {coord.get_index().to_list()}")
print("‚úÖ Descriptor-validated coordinate movement")
```

## üîç **Coordinate Validation with Descriptors**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import adaptor_coordinate_is_valid, coordinate_has_valid_offset

# Test coordinate validity within descriptor bounds
valid_idx = MultiIndex(2, [3, 5])  # Row 3, Column 5 (within 4x6)
invalid_idx = MultiIndex(2, [4, 6])  # Row 4, Column 6 (outside 4x6)

valid_coord = make_tensor_coordinate(descriptor, valid_idx)
try:
    invalid_coord = make_tensor_coordinate(descriptor, invalid_idx)
    print("Invalid coordinate created - descriptor validation needed")
except:
    print("Descriptor prevented invalid coordinate creation")

# Check if a coordinate is valid
print(f"Valid coordinate check: {adaptor_coordinate_is_valid(descriptor, valid_coord)}")

# Check if coordinate has valid offset
has_valid_offset = coordinate_has_valid_offset(descriptor, valid_coord)
print(f"Coordinate has valid offset: {has_valid_offset}")
print("‚úÖ Descriptor-based validation working")
```

## üéØ **Complex Transform Navigation**

Working with multi-transform adaptors:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import TensorAdaptor, EmbedTransform, PassThroughTransform
from pytensor.tensor_coordinate import make_tensor_adaptor_coordinate

# Create simple multi-transform adaptor using compatible transforms
# Use PassThrough transforms that preserve dimensions
pass1 = PassThroughTransform(4)  # First dimension (length 4)
pass2 = PassThroughTransform(6)  # Second dimension (length 6)

# Create TensorAdaptor with multiple transforms
adaptor = TensorAdaptor(
    transforms=[pass1, pass2],
    lower_dimension_hidden_idss=[[0], [1]],     # pass1‚Üídim0, pass2‚Üídim1
    upper_dimension_hidden_idss=[[2], [3]],     # pass1‚Üêdim2, pass2‚Üêdim3
    bottom_dimension_hidden_ids=[0, 1],         # Final bottom is dims 0,1
    top_dimension_hidden_ids=[2, 3]             # Top is dims 2,3
)

# Create coordinate that navigates through transforms
initial_idx = MultiIndex(2, [2, 3])  # Start with 4x6 coordinate
adaptor_coord = make_tensor_adaptor_coordinate(adaptor, initial_idx)

print(f"Upper index (4x6): {adaptor_coord.get_top_index().to_list()}")
print(f"Lower index (preserved): {adaptor_coord.get_bottom_index().to_list()}")

# Move through the transform chain  
offset = MultiIndex(2, [0, 1])
move_tensor_coordinate(adaptor, adaptor_coord, offset)
print(f"After move - Upper: {adaptor_coord.get_top_index().to_list()}")
print(f"After move - Lower: {adaptor_coord.get_bottom_index().to_list()}")
print("‚úÖ Multi-transform coordinate navigation")
```

## üßÆ **Linear Offset Calculations**

Understanding how descriptors convert to linear memory offsets:

```{pyodide}
#| echo: true
#| output: true

# Create coordinate with linear offset tracking
coord = make_tensor_coordinate(descriptor, MultiIndex(2, [1, 3]))

# Get the linear memory offset
linear_offset = coord.get_offset()
print(f"2D coordinate [1, 3] ‚Üí linear offset: {linear_offset}")

# Verify with manual calculation
manual_offset = 1 * 6 + 3 * 1  # row*stride + col*stride
print(f"Manual calculation: 1*6 + 3*1 = {manual_offset}")
print(f"Matches: {linear_offset == manual_offset}")
print("‚úÖ Linear offset calculation verified")
```

## üîó **Integration with Tensor Views**

How advanced coordinates work with tensor views:

```{pyodide}
#| echo: true
#| output: true

import numpy as np
from pytensor.tensor_view import make_naive_tensor_view

# Create tensor data and view
data = np.arange(24, dtype=np.float32).reshape(4, 6)
tensor_view = make_naive_tensor_view(data, [4, 6], [6, 1])

# Use advanced coordinate to access tensor
coord = make_tensor_coordinate(tensor_view.get_tensor_descriptor(), MultiIndex(2, [2, 4]))
linear_idx = coord.get_offset()

print(f"Coordinate [2, 4] ‚Üí linear index {linear_idx}")
print(f"Tensor value at [2, 4]: {data[2, 4]}")
print(f"Linear access value: {data.flat[linear_idx]}")
print("‚úÖ Coordinate-tensor integration working")
```

## üéÆ **Interactive Coordinate Debugging**

Advanced debugging techniques:

```{pyodide}
#| echo: true
#| output: true

def debug_coordinate_movement(descriptor, start_pos, moves):
    """Debug coordinate movement through multiple steps"""
    coord = make_tensor_coordinate(descriptor, MultiIndex(2, start_pos))
    print(f"Starting at: {coord.get_index().to_list()}")
    
    for i, move in enumerate(moves):
        try:
            offset = MultiIndex(2, move)
            move_tensor_coordinate(descriptor, coord, offset)
            print(f"Move {i+1} by {move}: ‚Üí {coord.get_index().to_list()}")
        except Exception as e:
            print(f"Move {i+1} by {move}: FAILED ({e})")
            break
    
    return coord

# Test coordinate movement sequence
moves = [[0, 1], [1, 0], [0, -1], [-1, 0]]  # Right, Down, Left, Up
final_coord = debug_coordinate_movement(descriptor, [1, 1], moves)
print("‚úÖ Coordinate movement debugging complete")
```

## üîç **Why These Operations Matter**

These advanced coordinate operations are essential for:

1. **Tile Windows** - Moving through tensor regions requires descriptor-aware navigation
2. **Sweep Operations** - Iterating over distributed data needs validated coordinate movement  
3. **Tensor Views** - Accessing tensor elements through complex layouts
4. **Distribution Systems** - Converting between thread coordinates and tensor coordinates

## üéØ **Interactive Applications**

Test these concepts in our apps:
- **[Tensor Transform App](../../tensor_transform_app.py)** - Visualize coordinate transformations
- **[Main App](../../app.py)** - See coordinates in action with distributions

## ‚úÖ **Next Steps**

Now you can understand:
- [**Tile Distribution**](tile-distribution.qmd) - How coordinates map to parallel processing
- [**Advanced Operations**](tile-window.qmd) - Complex coordinate-based operations

## Coordinate Movement

Coordinate movement is essential for iterating through tensor spaces, especially when transformations are involved. Movement requires knowledge of the descriptor or adaptor, since the transformation chain determines how steps in the top space map to changes in the hidden and bottom spaces.

**Example:**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import move_tensor_coordinate, make_tensor_coordinate, MultiIndex
from pytensor.tensor_descriptor import make_naive_tensor_descriptor

# Create a tensor descriptor (row-major 4x6)
descriptor = make_naive_tensor_descriptor([4, 6], [6, 1])

# Create initial coordinate at [1, 2]
coord = make_tensor_coordinate(descriptor, MultiIndex(2, [1, 2]))
print(f"Initial coordinate: {coord.get_index().to_list()}")

# Move by [0, 1] (right by one column)
step = MultiIndex(2, [0, 1])
move_tensor_coordinate(descriptor, coord, step)
print(f"After move: {coord.get_index().to_list()}")
```

> **Note:** Movement is only meaningful after you understand how descriptors and adaptors define the mapping between top, hidden, and bottom spaces.

---

*These operations bridge the gap between mathematical transforms and practical tensor manipulation!* 