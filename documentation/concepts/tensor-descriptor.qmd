---
title: "TensorDescriptor: The Complete Layout Description"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

# TensorDescriptor: The Complete Layout Description

A **TensorDescriptor** is a specialized form of TensorAdaptor that not only manages coordinate transformations, but also describes the full memory layout of a tensor. It is the central object for defining how a tensor is stored and accessed in memory.

## What is a TensorDescriptor?

- **Extends TensorAdaptor**: Inherits all the transformation logic and hierarchy management from TensorAdaptor.
- **Adds element space information**: Knows the total number of elements, vectorization guarantees, and other memory layout details.
- **Defines the full layout**: Combines a sequence of transforms with memory size and access properties.

## Example: Creating a TensorDescriptor with the Constructor

You can create a TensorDescriptor using its constructor, which extends TensorAdaptor with element space information:

```{pyodide}
from pytensor.tensor_descriptor import TensorDescriptor, EmbedTransform
from pytensor.tensor_coordinate import MultiIndex

# Create an embed transform for a 4x3 tensor with strides [3, 1]
embed_transform = EmbedTransform([4, 3], [3, 1])

# Create TensorDescriptor with the embed transform
# Hidden dimension IDs: 1, 2 for the 2D input, 3 for the linear output
descriptor = TensorDescriptor(
    transforms=[embed_transform],
    lower_dimension_hidden_idss=[[3]],     # One linear output dimension
    upper_dimension_hidden_idss=[[1, 2]],  # Two input dimensions
    top_dimension_hidden_ids=[1, 2],       # Top dimensions are the 2D input
    element_space_size=12                  # Total number of elements (4 * 3)
)

print(f"TensorDescriptor created:")
print(f"  Number of dimensions: {descriptor.get_num_of_dimension()}")
print(f"  Dimension lengths: {descriptor.get_lengths()}")
print(f"  Element space size: {descriptor.get_element_space_size()}")
print(f"  Number of transforms: {descriptor.get_num_of_transform()}")
print("‚úÖ TensorDescriptor created with constructor")
```

## Differences: TensorAdaptor vs TensorDescriptor

| Feature                | TensorAdaptor         | TensorDescriptor         |
|------------------------|----------------------|-------------------------|
| Coordinate transforms  | Yes                  | Yes                     |
| Hidden dimension mgmt  | Yes                  | Yes                     |
| Memory size info       | No                   | Yes                     |
| Vectorization info     | No                   | Yes                     |
| Used for...            | General transforms   | Full tensor layout      |

## Helper Functions for Descriptors

PythonCK provides several helper functions to quickly create common tensor layouts:

- **make_naive_tensor_descriptor**: Create a descriptor for a standard (strided) tensor layout with custom strides.
- **make_naive_tensor_descriptor_packed**: Create a descriptor for a packed (contiguous) layout.
- **make_naive_tensor_descriptor_aligned**: Create a descriptor with alignment constraints.
- **transform_tensor_descriptor**: Apply additional transforms to an existing descriptor.

These functions let you easily define the most common tensor layouts, or build up more complex ones by chaining transforms.

---

Next: See [Tensor Coordinates](tensor-coordinate.qmd) for how descriptors and adaptors are used to create and manipulate actual tensor indices.

# Tensor Descriptors: Layout Transformations

**Prerequisites**: [Buffer Views](buffer-view.qmd), [Tensor Transforms](tensor-transforms.qmd)

Tensor descriptors define how multi-dimensional tensor coordinates map to linear memory addresses through a series of **transformations**. This is the CRITICAL concept that enables understanding advanced coordinate operations.

## üéØ **Core Concept**

A **Tensor Descriptor** is a chain of transformations that convert between coordinate spaces:

```
Upper Index ‚Üí Transform Chain ‚Üí Lower Index ‚Üí Memory Address
```

## üîß **Basic Descriptor Creation**

```{pyodide}
#| echo: true
#| output: true

import numpy as np
from pytensor.tensor_descriptor import make_naive_tensor_descriptor

# Create a simple 4x6 matrix descriptor (row-major)
lengths = [4, 6]  # 4 rows, 6 columns
strides = [6, 1]  # Row stride=6, column stride=1
descriptor = make_naive_tensor_descriptor(lengths, strides)

print(f"Shape: {descriptor.get_lengths()}")
print(f"Memory size: {descriptor.get_element_space_size()}")
print("‚úÖ Basic descriptor created")
```

## üîÄ **Transform Deep Dive: to_upper vs to_lower**

Each transform has two operations:
- **`to_upper`**: Lower coordinate ‚Üí Upper coordinate (backward transform)
- **`to_lower`**: Upper coordinate ‚Üí Lower coordinate (forward transform)

### **1. EmbedTransform: Strided Layout**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import EmbedTransform
from pytensor.tensor_coordinate import MultiIndex

# Create embed transform: 2D ‚Üí 1D with strides [6, 1]
embed = EmbedTransform([2, 3], [6, 1])

# Forward: 2D coordinate ‚Üí 1D memory index
upper_coord = MultiIndex(2, [1, 2])  # Row 1, Column 2
lower_coord = embed.calculate_lower_index(upper_coord)
print(f"to_lower: {upper_coord} ‚Üí {lower_coord}")
print(f"Memory address: {lower_coord.to_list()[0]}")  # Should be 1*6 + 2*1 = 8

# Backward: 1D memory index ‚Üí 2D coordinate  
memory_idx = MultiIndex(1, [8])
recovered_coord = embed.calculate_upper_index(memory_idx)
print(f"to_upper: {memory_idx} ‚Üí {recovered_coord}")
print("‚úÖ EmbedTransform bidirectional mapping demonstrated")
```

### **2. UnmergeTransform: Packed Layout**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import UnmergeTransform

# Create unmerge transform: 1D ‚Üí 2D (unpack linear index)
unmerge = UnmergeTransform([2, 3])  # Split into 2x3

# Forward: 2D coordinate ‚Üí 1D packed index
upper_coord = MultiIndex(2, [1, 2])  # Row 1, Column 2  
lower_coord = unmerge.calculate_lower_index(upper_coord)
print(f"to_lower: {upper_coord} ‚Üí {lower_coord}")
print(f"Packed index: {lower_coord.to_list()[0]}")  # Should be 1*3 + 2 = 5

# Backward: 1D packed index ‚Üí 2D coordinate
packed_idx = MultiIndex(1, [5])
recovered_coord = unmerge.calculate_upper_index(packed_idx)
print(f"to_upper: {packed_idx} ‚Üí {recovered_coord}")
print("‚úÖ UnmergeTransform bidirectional mapping demonstrated")
```

### **3. MergeTransform: Dimension Merging**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import MergeTransform

# Create merge transform: 2D ‚Üí 1D (collapse dimensions)
merge = MergeTransform([2, 3])  # Merge 2x3 into single dimension

# Forward: 1D coordinate ‚Üí 2D split coordinate
upper_coord = MultiIndex(1, [5])  # Single index 5
lower_coord = merge.calculate_lower_index(upper_coord)
print(f"to_lower: {upper_coord} ‚Üí {lower_coord}")
print(f"Split coordinate: {lower_coord.to_list()}")  # Should be [1, 2] (5 = 1*3 + 2)

# Backward: 2D coordinate ‚Üí 1D merged index
split_coord = MultiIndex(2, [1, 2])
merged_coord = merge.calculate_upper_index(split_coord)
print(f"to_upper: {split_coord} ‚Üí {merged_coord}")
print("‚úÖ MergeTransform bidirectional mapping demonstrated")
```

### **4. ReplicateTransform: Broadcasting**

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import ReplicateTransform

# Create replicate transform: broadcast to 6 positions
replicate = ReplicateTransform([6])  # Broadcast single value to 6 positions

# Note: ReplicateTransform has no lower dimensions and always returns zeros
# The transform maps any upper coordinate to empty lower coordinate
# and any lower coordinate to zero upper coordinate

print(f"ReplicateTransform created:")
print(f"  Upper dimensions: [6]")
print(f"  Lower dimensions: [] (empty - no lower dimensions)")
print(f"  Purpose: Broadcast single value to multiple positions")

# Forward: upper coordinate ‚Üí empty lower coordinate
upper_coord = MultiIndex(1, [4])  # Index 4 in upper dimension
print(f"Forward (upper ‚Üí lower): {upper_coord.to_list()} ‚Üí [] (no lower dimensions)")

# Backward: empty lower coordinate ‚Üí zero upper coordinate  
print(f"Backward (lower ‚Üí upper): [] ‚Üí [0] (always returns zero)")
print("‚úÖ ReplicateTransform behavior explained")
```

## üîó **Transform Chains**

Real descriptors combine multiple transforms. TensorDescriptor internally manages these transform chains, and you can use helper functions to create common patterns:

```{pyodide}
#| echo: true
#| output: true

# Helper functions create complex descriptors with transform chains internally
complex_descriptor = make_naive_tensor_descriptor([4, 2], [8, 1])

print(f"Complex descriptor created:")
print(f"  Shape: {complex_descriptor.get_lengths()}")
print(f"  Element space size: {complex_descriptor.get_element_space_size()}")
print("‚úÖ Transform chain managed internally by descriptor")
```

## üßÆ **Symbolic Transform Analysis**

For complex analysis, descriptors support symbolic mathematics:

```{pyodide}
#| echo: true
#| output: true

import sympy as sp

# Create symbolic coordinates for analysis
embed = EmbedTransform([4, 3], [3, 1])

# Define symbolic upper coordinates
i, j = sp.symbols('i j')
upper_symbolic = [i, j]

# Get symbolic lower coordinate
try:
    # Note: This would require symbolic implementation
    print("Symbolic analysis:")
    print(f"Upper: [{i}, {j}]")
    print(f"Lower: {i}*3 + {j}*1 = 3*{i} + {j}")
    print("‚úÖ Symbolic transform relationship shown")
except:
    print("Symbolic analysis demonstrates the mathematical relationship")
    print("For embed with strides [3, 1]: lower = 3*i + j")
```

## üîç **Why This Matters**

Understanding these transforms is CRITICAL because:

1. **`move_tensor_coordinate`** uses descriptor transforms to validate moves
2. **Tensor views** rely on descriptors for coordinate mapping
3. **Tile distributions** use descriptors to define data layout
4. **Sweep operations** traverse coordinates through descriptor transformations

## üéØ **Interactive Applications**

Explore these concepts in our interactive apps:
- **[Tensor Transform App](../../tensor_transform_app.py)** - Visualize all transform types
- **[Main App](../../app.py)** - See how descriptors integrate with distributions

## ‚úÖ **Next Steps**

Now that you understand descriptors, you can move to:
- [**Tensor Coordinates**](tensor-coordinate.qmd) - Final memory-mapped coordinates with offsets
- [**Tensor Adaptors**](tensor-adaptor.qmd) - The transformation engines that execute descriptors
- [**Advanced Coordinate Operations**](tensor-coordinate-advanced.qmd) - Functions that require descriptors

---

*Descriptors are the mathematical foundation that makes everything else possible. Master these transforms!* 