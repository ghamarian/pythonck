---
title: "Tensor Coordinates"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

# Tensor Coordinates

Tensor coordinates provide a powerful abstraction for multi-dimensional indexing with support for complex transformations. They form the foundation for all tensor operations in PythonCK.

## Core Components

### MultiIndex
A `MultiIndex` represents a multi-dimensional index with a specific number of dimensions:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import MultiIndex

# Create a 3D index
idx = MultiIndex(3, [2, 1, 4])
print(f"3D index: {idx}")
print(f"Dimensions: {idx.get_ndim()}")
print(f"Values: {idx.to_list()}")
```

### TensorCoordinate
A `TensorCoordinate` represents coordinates in a tensor space with transformations:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import TensorCoordinate, MultiIndex

# Create a tensor coordinate
# TensorCoordinate needs: ndim_hidden, top_dimension_hidden_ids, idx_hidden
ndim_hidden = 4  # Total hidden dimensions
top_dimension_hidden_ids = [1, 2, 3]  # Which hidden dims map to top
idx_hidden = MultiIndex(4, [0, 1, 2, 3])  # Initial hidden index

coord = TensorCoordinate(
    ndim_hidden=ndim_hidden,
    top_dimension_hidden_ids=top_dimension_hidden_ids,
    idx_hidden=idx_hidden
)

print(f"Tensor coordinate created")
print(f"Top index: {coord.get_index()}")
print(f"Offset: {coord.get_offset()}")
```

## Key Operations

### Index Manipulation

```{pyodide}
#| echo: true
#| output: true

# Create and manipulate indices
idx1 = MultiIndex(2, [3, 7])
idx2 = MultiIndex(2, [1, 2])

print(f"Original: {idx1}")
print(f"Offset: {idx2}")

# Element-wise operations
result = MultiIndex(2, [idx1[i] + idx2[i] for i in range(2)])
print(f"Sum: {result}")
```

### Coordinate Transformations

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import TensorAdaptorCoordinate

# Create an adaptor coordinate manually for demonstration
# In practice, these are created through tensor descriptors and adaptors
ndim_hidden = 3
bottom_dimension_hidden_ids = [0]  # Maps to offset
top_dimension_hidden_ids = [1, 2]  # Maps to 2D index
idx_hidden = MultiIndex(3, [5, 2, 3])  # offset=5, index=(2,3)

adaptor_coord = TensorAdaptorCoordinate(
    ndim_hidden=ndim_hidden,
    bottom_dimension_hidden_ids=bottom_dimension_hidden_ids,
    top_dimension_hidden_ids=top_dimension_hidden_ids,
    idx_hidden=idx_hidden
)

print(f"Adaptor coordinate created")
print(f"Top index: {adaptor_coord.get_top_index()}")
print(f"Bottom index: {adaptor_coord.get_bottom_index()}")
print(f"Hidden index: {adaptor_coord.get_hidden_index()}")
```

## Relationship to Other Concepts

Tensor coordinates are used throughout PythonCK:

- **Buffer Views** use coordinates to access memory locations
- **Tensor Descriptors** transform coordinates through layout changes  
- **Tile Distributions** map coordinates between different spaces
- **Sweep Operations** iterate through coordinate ranges

## Next Steps

- Explore [Buffer Views](buffer-view.qmd) to see how coordinates access memory
- Learn about [Tensor Descriptors](tensor-descriptor.qmd) for coordinate transformations
- Understand [Tile Distribution](tile-distribution.qmd) for parallel coordinate mapping

The coordinate system provides the mathematical foundation that enables all the advanced tensor operations in PythonCK. 