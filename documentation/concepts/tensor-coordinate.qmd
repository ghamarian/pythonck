---
title: "Tensor Coordinates"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Import required classes
from pytensor.tensor_coordinate import MultiIndex, TensorCoordinate, TensorAdaptorCoordinate, make_tensor_coordinate, make_tensor_adaptor_coordinate
from pytensor.tensor_descriptor import make_naive_tensor_descriptor
```

**Prerequisites**: [Buffer Views](buffer-view.qmd), [Tensor Descriptors](tensor-descriptor.qmd)

Tensor coordinates represent **the final result** after all tensor layout transformations have been applied. They store both the multi-dimensional index and the linear memory offset that results from complex coordinate transformations.

## What is a TensorCoordinate?

A `TensorCoordinate` is the end product of the tensor transformation pipeline:

```
Input Index ‚Üí Transforms ‚Üí TensorCoordinate (Index + Offset)
```

**Key characteristics:**

- **Stores the final index**: The transformed multi-dimensional coordinate
- **Stores the linear offset**: The final memory location after all transformations
- **Extends TensorAdaptorCoordinate**: Inherits transformation tracking but focuses on the final result
- **Always has a single bottom dimension**: The linear offset is stored in hidden dimension `[0]`

## Why TensorCoordinate Matters

After complex transformations (embedding, merging, unmerging, etc.), you need:

1. **The final index**: Where you are in the logical tensor space
2. **The linear offset**: Where to actually access memory

TensorCoordinate provides both pieces of information in a single, convenient container.

## Core Components

### MultiIndex
A `MultiIndex` represents a multi-dimensional index with a specific number of dimensions:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import MultiIndex

# Create a 3D index
idx = MultiIndex(3, [2, 1, 4])
print(f"3D index: {idx}")
print(f"Dimensions: {len(idx)}")  # Use len() like in C++ size()
print(f"Size: {idx.size}")  # Direct access to size attribute
print(f"Values: {idx.to_list()}")
```

### TensorCoordinate
A `TensorCoordinate` represents coordinates in a tensor space with transformations:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import TensorCoordinate, MultiIndex

# Create a tensor coordinate
# TensorCoordinate needs: ndim_hidden, top_dimension_hidden_ids, idx_hidden
ndim_hidden = 4  # Total hidden dimensions
top_dimension_hidden_ids = [1, 2, 3]  # Which hidden dims map to top
idx_hidden = MultiIndex(4, [0, 1, 2, 3])  # Initial hidden index

coord = TensorCoordinate(
    ndim_hidden=ndim_hidden,
    top_dimension_hidden_ids=top_dimension_hidden_ids,
    idx_hidden=idx_hidden
)

print(f"Tensor coordinate created")
print(f"Top index: {coord.get_index()}")
print(f"Offset: {coord.get_offset()}")
```

## Key Operations

### Index Manipulation

```{pyodide}
#| echo: true
#| output: true

# Create and manipulate indices
idx1 = MultiIndex(2, [3, 7])
idx2 = MultiIndex(2, [1, 2])

print(f"Original: {idx1}")
print(f"Offset: {idx2}")

# Element-wise operations
result = MultiIndex(2, [idx1[i] + idx2[i] for i in range(2)])
print(f"Sum: {result}")
```

### Coordinate Transformations

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import TensorAdaptorCoordinate

# Create an adaptor coordinate manually for demonstration
# In practice, these are created through tensor descriptors and adaptors
ndim_hidden = 3
bottom_dimension_hidden_ids = [0]  # Maps to offset
top_dimension_hidden_ids = [1, 2]  # Maps to 2D index
idx_hidden = MultiIndex(3, [5, 2, 3])  # offset=5, index=(2,3)

adaptor_coord = TensorAdaptorCoordinate(
    ndim_hidden=ndim_hidden,
    bottom_dimension_hidden_ids=bottom_dimension_hidden_ids,
    top_dimension_hidden_ids=top_dimension_hidden_ids,
    idx_hidden=idx_hidden
)

print(f"Adaptor coordinate created")
print(f"Top index: {adaptor_coord.get_top_index()}")
print(f"Bottom index: {adaptor_coord.get_bottom_index()}")
print(f"Hidden index: {adaptor_coord.get_hidden_index()}")
```

## Relationship to Other Concepts

Tensor coordinates are used throughout PythonCK:

- **Buffer Views** use coordinates to access memory locations
- **Tensor Descriptors** transform coordinates through layout changes  
- **Tile Distributions** map coordinates between different spaces
- **Sweep Operations** iterate through coordinate ranges

## Next Steps

- Learn about [**Tensor Adaptors**](tensor-adaptor.qmd) - The transformation engines that execute descriptors
- Explore [**Tensor Adaptor Coordinates**](tensor-adaptor-coordinate.qmd) - Result containers for transformed indices
- Understand [**Advanced Coordinate Operations**](tensor-coordinate-advanced.qmd) - Functions that require descriptors

The coordinate system provides the mathematical foundation that enables all the advanced tensor operations in PythonCK. 

### TensorCoordinate: Index + Offset Storage

A `TensorCoordinate` stores the final result of tensor transformations - both the logical index and the linear memory offset:

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import make_tensor_coordinate
from pytensor.tensor_descriptor import make_naive_tensor_descriptor

# Create a 4x6 tensor descriptor (row-major layout)
descriptor = make_naive_tensor_descriptor([4, 6], [6, 1])

# Create a tensor coordinate for logical index [2, 3]
logical_index = [2, 3]
coord = make_tensor_coordinate(descriptor, logical_index)

print(f"üéØ TensorCoordinate stores the final result:")
print(f"  Input logical index: {logical_index}")
print(f"  Final index: {coord.get_index().to_list()}")
print(f"  Linear offset: {coord.get_offset()}")
print(f"  Manual calculation: 2*6 + 3*1 = {2*6 + 3*1}")
print(f"  ‚úÖ Both index and offset stored!")
```

### Key Methods

```{pyodide}
#| echo: true
#| output: true

# TensorCoordinate provides clear access to both pieces of information
print(f"üìç TensorCoordinate key methods:")
print(f"  coord.get_index(): {coord.get_index().to_list()} (the logical index)")
print(f"  coord.get_offset(): {coord.get_offset()} (the memory offset)")
print(f"  coord.get_hidden_index(): {coord.get_hidden_index().to_list()} (internal storage)")

# The beauty: after complex transformations, you always get both!
print(f"‚ú® Perfect for memory access: tensor[{coord.get_index().to_list()}] = memory[{coord.get_offset()}]")
```

### Comparison with TensorAdaptorCoordinate

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_coordinate import make_tensor_adaptor_coordinate

# Create an adaptor coordinate (intermediate result)
# Since TensorDescriptor extends TensorAdaptor, we can use it directly
adaptor_coord = make_tensor_adaptor_coordinate(descriptor, coord.get_index())

print(f"üîÑ TensorAdaptorCoordinate vs TensorCoordinate:")
print(f"  Adaptor - Top: {adaptor_coord.get_top_index().to_list()}, Bottom: {adaptor_coord.get_bottom_index().to_list()}")
print(f"  Tensor  - Index: {coord.get_index().to_list()}, Offset: {coord.get_offset()}")
print(f"  üéØ TensorCoordinate simplifies: single offset instead of bottom index")
``` 