---
title: "Tensor Transforms: The Building Blocks"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

**Prerequisites**: [Buffer Views](buffer-view.qmd)

**Tensor Transforms** are the fundamental building blocks that define how coordinates map between different spaces. Understanding these individual transforms is essential before learning how they're combined into descriptors and adaptors.

## üéØ **Core Concept**

A **Tensor Transform** is a mathematical operation that converts coordinates between two spaces:

```
Upper Coordinates ‚Üê‚Üí Transform ‚Üê‚Üí Lower Coordinates
```

Each transform has two operations:
- **`to_lower`**: Upper coordinate ‚Üí Lower coordinate (forward transform)
- **`to_upper`**: Lower coordinate ‚Üí Upper coordinate (backward transform)

## üîß **Transform Types**

### **1. EmbedTransform: Strided Layout**

**Purpose**: Maps multi-dimensional coordinates to linear memory with custom strides.

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import EmbedTransform
from pytensor.tensor_coordinate import MultiIndex

# Create embed transform: 2D ‚Üí 1D with strides [6, 1]
embed = EmbedTransform([2, 3], [6, 1])

print(f"EmbedTransform created:")
print(f"  Upper dimensions: [2, 3] (2x3 matrix)")
print(f"  Strides: [6, 1] (row stride=6, column stride=1)")
print(f"  Lower dimensions: [1] (linear memory)")
print("‚úÖ EmbedTransform created")
```

#### Forward Transformation (to_lower)

```{pyodide}
#| echo: true
#| output: true

# Forward: 2D coordinate ‚Üí 1D memory index
upper_coord = MultiIndex(2, [1, 2])  # Row 1, Column 2
lower_coord = embed.calculate_lower_index(upper_coord)

print(f"Forward transformation (to_lower):")
print(f"  Input: {upper_coord.to_list()} (row 1, column 2)")
print(f"  Output: {lower_coord.to_list()} (memory index)")
print(f"  Calculation: 1*6 + 2*1 = {1*6 + 2*1}")
print(f"  Memory layout: [row0,row0,row0,row0,row0,row0, row1,row1,row1,row1,row1,row1, ...]")
print("‚úÖ Forward transformation demonstrated")
```

#### Backward Transformation (to_upper)

```{pyodide}
#| echo: true
#| output: true

# Backward: 1D memory index ‚Üí 2D coordinate
memory_idx = MultiIndex(1, [8])  # Memory index 8
recovered_coord = embed.calculate_upper_index(memory_idx)

print(f"Backward transformation (to_upper):")
print(f"  Input: {memory_idx.to_list()} (memory index 8)")
print(f"  Output: {recovered_coord.to_list()} (recovered 2D coordinate)")
print(f"  Verification: {recovered_coord.to_list() == upper_coord.to_list()}")
print("‚úÖ Backward transformation demonstrated")
```

#### Visual Example

```{pyodide}
#| echo: true
#| output: true

# Test a few coordinates to show the mapping
test_coords = [(0,0), (0,1), (1,0), (1,2)]

print("üìä EmbedTransform Examples:")
for row, col in test_coords:
    coord = MultiIndex(2, [row, col])
    result = embed.calculate_lower_index(coord)
    print(f"  [{row},{col}] ‚Üí {result.to_list()[0]} (calculation: {row}*6 + {col}*1 = {row*6 + col*1})")

print("‚úÖ EmbedTransform examples complete")
```

### **2. UnmergeTransform: Packed Layout**

**Purpose**: Unpacks a linear index into multi-dimensional coordinates.

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import UnmergeTransform

# Create unmerge transform: 2D ‚Üí 1D (pack 2x3 into linear)
unmerge = UnmergeTransform([2, 3])

print(f"UnmergeTransform created:")
print(f"  Upper dimensions: [2, 3] (2x3 matrix)")
print(f"  Lower dimensions: [1] (packed linear index)")
print(f"  Packing: row-major order (row*3 + col)")
print("‚úÖ UnmergeTransform created")
```

#### Forward Transformation (to_lower)

```{pyodide}
#| echo: true
#| output: true

# Forward: 2D coordinate ‚Üí 1D packed index
upper_coord = MultiIndex(2, [1, 2])  # Row 1, Column 2
lower_coord = unmerge.calculate_lower_index(upper_coord)

print(f"Forward transformation (to_lower):")
print(f"  Input: {upper_coord.to_list()} (row 1, column 2)")
print(f"  Output: {lower_coord.to_list()} (packed index)")
print(f"  Calculation: 1*3 + 2 = {1*3 + 2}")
print("‚úÖ Forward transformation demonstrated")
```

#### Backward Transformation (to_upper)

```{pyodide}
#| echo: true
#| output: true

# Backward: 1D packed index ‚Üí 2D coordinate
packed_idx = MultiIndex(1, [5])
recovered_coord = unmerge.calculate_upper_index(packed_idx)

print(f"Backward transformation (to_upper):")
print(f"  Input: {packed_idx.to_list()} (packed index 5)")
print(f"  Output: {recovered_coord.to_list()} (recovered 2D coordinate)")
print(f"  Verification: {recovered_coord.to_list() == upper_coord.to_list()}")
print("‚úÖ Backward transformation demonstrated")
```

### **3. MergeTransform: Dimension Merging**

**Purpose**: Merges multiple dimensions into a single dimension.

**Key Difference from EmbedTransform**: 
- **EmbedTransform**: Maps multi-dimensional coordinates to linear memory with custom strides (preserves the original coordinate structure)
- **MergeTransform**: Collapses multiple dimensions into a single dimension (changes the coordinate structure)

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import MergeTransform

# Create merge transform: 1D ‚Üí 2D (split single dimension into 2x3)
merge = MergeTransform([2, 3])

print(f"MergeTransform created:")
print(f"  Upper dimensions: [1] (single dimension)")
print(f"  Lower dimensions: [2, 3] (split into 2x3)")
print(f"  Splitting: first dimension ‚Üí row, second dimension ‚Üí column")
print("‚úÖ MergeTransform created")
```

#### Forward Transformation (to_lower)

```{pyodide}
#| echo: true
#| output: true

# Forward: 1D coordinate ‚Üí 2D split coordinate
upper_coord = MultiIndex(1, [5])  # Single index 5
lower_coord = merge.calculate_lower_index(upper_coord)

print(f"Forward transformation (to_lower):")
print(f"  Input: {upper_coord.to_list()} (single index 5)")
print(f"  Output: {lower_coord.to_list()} (split into 2D)")
print(f"  Calculation: row = 5 // 3 = 1, col = 5 % 3 = 2")
print(f"  Result: [1, 2] (row 1, column 2)")
print("‚úÖ Forward transformation demonstrated")
```

#### Backward Transformation (to_upper)

```{pyodide}
#| echo: true
#| output: true

# Backward: 2D coordinate ‚Üí 1D merged index
split_coord = MultiIndex(2, [1, 2])
merged_coord = merge.calculate_upper_index(split_coord)

print(f"Backward transformation (to_upper):")
print(f"  Input: {split_coord.to_list()} (2D coordinate [1, 2])")
print(f"  Output: {merged_coord.to_list()} (merged single index)")
print(f"  Calculation: 1*3 + 2 = {1*3 + 2}")
print(f"  Verification: {merged_coord.to_list() == upper_coord.to_list()}")
print("‚úÖ Backward transformation demonstrated")
```

### **4. ReplicateTransform: Broadcasting**

**Purpose**: Broadcasts smaller dimensions to larger dimensions (replication).

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_descriptor import ReplicateTransform

# Create replicate transform: broadcast 3 elements to 6
replicate = ReplicateTransform([6])

print(f"ReplicateTransform created:")
print(f"  Upper dimensions: [6] (larger dimension)")
print(f"  Lower dimensions: [0] (no lower dimensions - broadcasting)")
print(f"  Broadcasting: single value repeated to fill 6 positions")
print("‚úÖ ReplicateTransform created")
```

#### Forward Transformation (to_lower)

```{pyodide}
#| echo: true
#| output: true

# Forward: 6D coordinate ‚Üí 0D coordinate (no lower dimensions for replicate)
upper_coord = MultiIndex(1, [4])  # Index 4 in larger dimension
lower_coord = replicate.calculate_lower_index(upper_coord)

print(f"Forward transformation (to_lower):")
print(f"  Input: {upper_coord.to_list()} (index 4 in 6D)")
print(f"  Output: {lower_coord.to_list()} (empty - no lower dimensions)")
print(f"  Note: ReplicateTransform has no lower dimensions")
print("‚úÖ Forward transformation demonstrated")
```

#### Backward Transformation (to_upper)

```{pyodide}
#| echo: true
#| output: true

# Backward: 0D coordinate ‚Üí 6D coordinate (all zeros for replicate)
source_coord = MultiIndex(0, [])  # Empty lower coordinate
broadcast_coord = replicate.calculate_upper_index(source_coord)

print(f"Backward transformation (to_upper):")
print(f"  Input: {source_coord.to_list()} (empty lower coordinate)")
print(f"  Output: {broadcast_coord.to_list()} (all zeros in 6D)")
print(f"  Note: ReplicateTransform broadcasts single value to all positions")
print("‚úÖ Backward transformation demonstrated")
```

## üîÑ **Transform Validation**

### Bidirectional Verification

```{pyodide}
#| echo: true
#| output: true

def validate_transform_bidirectional(transform, test_coords, transform_name):
    """Validate that a transform works bidirectionally"""
    
    print(f"üîç Validating {transform_name}:")
    
    for i, coord in enumerate(test_coords):
        # Forward transformation
        lower = transform.calculate_lower_index(coord)
        
        # Backward transformation
        recovered = transform.calculate_upper_index(lower)
        
        # Check if we get back to the original
        matches = recovered.to_list() == coord.to_list()
        status = "‚úì" if matches else "‚úó"
        print(f"  Test {i}: {coord.to_list()} ‚Üí {lower.to_list()} ‚Üí {recovered.to_list()} {status}")
    
    print(f"‚úÖ {transform_name} validation complete")

# Test all transforms
print("=== Transform Validation ===")

# EmbedTransform tests
embed_tests = [MultiIndex(2, [0,0]), MultiIndex(2, [1,1]), MultiIndex(2, [1,2])]
validate_transform_bidirectional(embed, embed_tests, "EmbedTransform")

print()

# UnmergeTransform tests
unmerge_tests = [MultiIndex(2, [0,0]), MultiIndex(2, [1,1]), MultiIndex(2, [1,2])]
validate_transform_bidirectional(unmerge, unmerge_tests, "UnmergeTransform")

print()

# MergeTransform tests
merge_tests = [MultiIndex(1, [0]), MultiIndex(1, [3]), MultiIndex(1, [5])]
validate_transform_bidirectional(merge, merge_tests, "MergeTransform")

print()

# ReplicateTransform tests
replicate_tests = [MultiIndex(1, [0]), MultiIndex(1, [3]), MultiIndex(1, [5])]
validate_transform_bidirectional(replicate, replicate_tests, "ReplicateTransform")
```

## üéØ **Integration with Real Applications**

Transforms are used throughout PythonCK:

- **Tensor Descriptors** combine transforms to define tensor layouts
- **Tensor Adaptors** execute transforms to perform coordinate conversions
- **Tile Distributions** use transforms to map between coordinate spaces
- **Memory Access** relies on transforms for address calculations

## ‚úÖ **Next Steps**

Now that you understand the individual transforms, you can explore:

- [**Tensor Descriptors**](tensor-descriptor.qmd) - How transforms are combined into layout definitions
- [**Tensor Coordinates**](tensor-coordinate.qmd) - How transforms create final memory-mapped coordinates
- [**Tensor Adaptors**](tensor-adaptor.qmd) - How transforms are executed as transformation engines

---

*Tensor Transforms are the mathematical building blocks that make all coordinate operations possible. Master these four transform types to understand how PythonCK maps between different coordinate spaces.* 