---
title: "PythonCK Learning Path"
format: live-html
---

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

# Complete Learning Path to Understanding Thread Mapping

This document provides a **restructured learning path** to understand all concepts in PythonCK, with proper dependency ordering and focused explanations.

## üéØ **Ultimate Goal: Understanding `tile_distr_thread_mapping.py`**

The final example demonstrates complete GPU thread coordination - how threads cooperatively process tensor data using tile windows, sweep operations, and distribution strategies.

## üìö **Reorganized Learning Path**

### **Phase 1: Foundation (Memory & Basic Indexing)**
1. [**Buffer Views**](buffer-view.qmd) - Memory abstraction layer
2. [**Tensor Transforms**](tensor-transforms.qmd) - The building blocks for coordinate transformations
3. [**Tensor Descriptors**](tensor-descriptor.qmd) - Layout configuration and transformations
4. [**Tensor Coordinates**](tensor-coordinate.qmd) - Final memory-mapped coordinates with offsets
5. [**Tensor Adaptors**](tensor-adaptor.qmd) - The transformation engines that execute descriptors
6. [**Tensor Adaptor Coordinates**](tensor-adaptor-coordinate.qmd) - Result containers for transformed indices/offsets

### **Phase 2: Advanced Indexing (Requires Descriptors)**
4. [**Advanced Coordinate Operations**](tensor-coordinate-advanced.qmd) - `move_tensor_coordinate` and transform-dependent operations
5. [**Tensor Views**](tensor-view.qmd) - Unified access interface

### **Phase 3: Distribution (Parallel Processing)**
6. [**Tile Distribution Encoding**](tile-distribution-encoding.qmd) - Mathematical encoding framework
7. [**Tile Distribution Deep Dive**](tile-distribution.qmd) - `make_static_tile_distribution`, adaptors, descriptors
8. [**Static Distributed Tensors**](static-distributed-tensor.qmd) - Thread-local data management

### **Phase 4: Advanced Operations (GPU Coordination)**
9. [**Tile Windows Deep Dive**](tile-window.qmd) - `precompute`, `load`, descriptor integration
10. [**Sweep Operations**](sweep-tile.qmd) - Coordinated iteration patterns
11. [**Complete Thread Mapping**](thread-mapping.qmd) - Understanding the full pipeline

---

## üîÑ **Key Restructuring Changes**

### **Logical Learning Order**
- **Before**: Basic Coordinates ‚Üí Descriptors ‚Üí Advanced Coordinates (‚ùå Mixed concepts)
- **After**: Transforms ‚Üí Descriptors ‚Üí Coordinates ‚Üí Adaptors ‚Üí Adaptor Coordinates (‚úÖ Clear flow)

### **Conceptual Flow**
- **Tensor Transforms**: The building blocks for coordinate transformations (Embed, Unmerge, Merge, Replicate)
- **TensorDescriptor**: Configuration/metadata for transformations (what to do)
- **TensorCoordinate**: Final memory-mapped coordinates with offsets (what users work with)
- **TensorAdaptor**: Transformation engine that executes descriptors (how to do it)
- **TensorAdaptorCoordinate**: Result containers for transformed indices/offsets (intermediate results)

### **Dependency-Aware Ordering**
- **Before**: Coordinates ‚Üí Descriptors (‚ùå Wrong dependency order)
- **After**: Descriptors ‚Üí Coordinates ‚Üí Adaptors ‚Üí Adaptor Coordinates (‚úÖ Correct)

### **Focused Pages**
- **Before**: Long pages with multiple concepts
- **After**: One concept per page with deep explanations

### **Transform Examples**
- Complete `to_upper`/`to_lower` examples for all transforms
- Visual demonstrations of coordinate transformations

### **Deep Integration Examples**
- How `precompute` uses both tensor and distribution descriptors
- Complete breakdown of `make_static_tile_distribution`
- Links to interactive apps

---

## üéì **Learning Strategy**

1. **Follow the order strictly** - later concepts build on earlier ones
2. **Run all examples** - hands-on understanding is crucial
3. **Experiment with parameters** - modify examples to see effects
4. **Use the apps** - [`tensor_transform_app`](../../tensor_transform_app.py) and [`app`](../../app.py) for visualization

---

## üîó **Interactive Applications**

- **[Tensor Transform App](../../tensor_transform_app.py)** - Visualize descriptor transformations
- **[Main App](../../app.py)** - Explore tile distributions and thread mapping
- **[Thread Mapping Example](../../tile_distr_thread_mapping.py)** - Complete GPU coordination

---

## üìñ **Page Structure**

Each concept page now includes:
- ‚úÖ **Prerequisites** - What you need to understand first
- ‚úÖ **Core Concept** - Focused explanation
- ‚úÖ **Interactive Examples** - Hands-on code
- ‚úÖ **Transform Examples** - `to_upper`/`to_lower` for applicable concepts
- ‚úÖ **Integration Points** - How it connects to other concepts
- ‚úÖ **Next Steps** - What to learn next

---

*Ready to start? Begin with [**Buffer Views**](buffer-view.qmd) - the foundation of memory abstraction, then learn [**Tensor Transforms**](tensor-transforms.qmd) - the building blocks for all coordinate operations.* 