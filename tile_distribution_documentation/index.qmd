---
title: "Tile Distribution Documentation"
format: live-html
---

Welcome to the complete tile distribution documentation! This is a standalone learning journey from basic memory concepts to advanced GPU optimization techniques.

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

## Complete Learning Journey

Follow our structured 8-part learning path:

### **Introduction and Motivation**
- **[Introduction and Motivation](concepts/00_introduction_motivation.qmd)** - Why tile distribution matters, GPU memory challenges, and the solution overview

### **Foundation** 
- **[Buffer Views](concepts/01_buffer_view.qmd)** - Raw memory access
- **[Tensor Views](concepts/01_tensor_view.qmd)** - Multi-dimensional structure

### **Transformation Engine** 
- **[Basic Coordinates](concepts/02_tensor_coordinates.qmd)** - MultiIndex fundamentals
- **[Individual Transforms](concepts/02_transforms.qmd)** - Building blocks (EmbedTransform, UnmergeTransform, etc.)
- **[Chaining Adaptors](concepts/02_adaptors.qmd)** - Combining transforms into complex operations
- **[Complete Descriptors](concepts/02_descriptors.qmd)** - Full tensor specifications with layouts
- **[Convolution Example](concepts/02_convolution_example.qmd)** - Practical convolution implementation
- **[Swizzling Example](concepts/02_swizzling_example.qmd)** - Morton ordering and memory patterns
- **[Advanced Coordinates](concepts/02_coordinate_movement.qmd)** - TensorCoordinate and movement operations

### **Distribution API** 
- **[Tile Distribution](concepts/03_tile_distribution.qmd)** - The core API for work assignment
- **[Tile Window](concepts/03_tile_window.qmd)** - Data access gateway with windowing
- **[Sweep Tile](concepts/03_sweep_tile.qmd)** - Elegant iteration patterns

### **Coordinate Systems** 
- **[Coordinate Systems](concepts/04_coordinate_systems.qmd)** - The mathematical foundation (P, Y, X, R, D spaces)

### **Implementation Deep Dive** 
- **[Encoding Internals](concepts/05_encoding_internals.qmd)** - How mathematical encoding creates transformation components
- **[Static Distributed Tensor](concepts/05_static_distributed_tensor.qmd)** - Thread-local data containers and organization

### **Thread Mapping** 
- **[Thread Mapping](concepts/06_thread_mapping.qmd)** - Connecting to hardware, thread cooperation patterns

### **Reference** 
- **[Terminology](concepts/terminology.qmd)** - Comprehensive glossary of all CK concepts, coordinate spaces, and operations

### **Coming Soon**
- **Advanced Topics** - Performance optimization and debugging

## Interactive Applications

Explore tile distribution concepts through interactive web applications:

### **[Tile Distribution Visualizer](../app.py)**
Interactive visualization of tile distribution structures and GPU memory layouts. Perfect for understanding how data is distributed across parallel processing elements.

### **[Tensor Transform Visualizer](../tensor_transform_app.py)**  
Explore tensor descriptor transformations with visual graphs and mathematical formulas. See how data layouts change through various transformations.

### **[Thread Visualization App](../thread_visualization_app.py)**
Visualize GPU thread coordinate mapping and access patterns. Understand how individual threads access distributed tensor data.

## Quick Test

Let's verify everything is working:

```{pyodide}
#| echo: true
#| output: true

import numpy as np
from pytensor.buffer_view import make_buffer_view, AddressSpaceEnum

# Quick test
data = np.array([1, 2, 3, 4], dtype=np.float32)
buffer_view = make_buffer_view(data, len(data), AddressSpaceEnum.GLOBAL)

print("PythonCK loaded successfully!")
print(f"Buffer view created: size = {buffer_view.buffer_size}")
print(f"Data type: {buffer_view.dtype}")
print("Ready to explore tile distribution!")
```

## How to Use This Documentation

1. **Follow the learning path** - Each part builds on the previous ones
2. **Run the code** - All examples are interactive and executable
3. **Experiment** - Modify the code to deepen your understanding
4. **Test yourself** - Each section includes validation exercises

Ready to start? Begin with [Part 0: Introduction and Motivation](concepts/00_introduction_motivation.qmd)! 