---
title: "Tensor Views - Multi-Dimensional Structure"
format: live-html
---

## Overview

TensorView adds multi-dimensional structure to raw memory. While BufferView provides linear access, TensorView enables coordinate-based access to matrices, tensors, and higher-dimensional data structures.

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")


def print_tensor(tensor_view, title="Tensor"):
    """Print tensor as a formatted matrix."""
    if title:
        print(f"\n{title}:")
    
    lengths = tensor_view.get_tensor_descriptor().get_lengths()
    
    if len(lengths) == 2:
        # 2D tensor - print as matrix
        rows, cols = lengths
        for i in range(rows):
            row_values = []
            for j in range(cols):
                value = tensor_view[i, j]
                row_values.append(f"{value:6.1f}")
            print(" ".join(row_values))
    else:
        # Higher dimensional - print shape and some elements
        print(f"Shape: {lengths}")
        print(f"Sample elements: {tensor_view[0] if len(lengths) > 0 else 'N/A'}")

def print_windows_tiled(tensor_view, title="Tiled View"):
    """
    Print 4D tensor view as a tiled 2D layout using tensor view get methods.
    Expects tensor_view to have shape [out_h, out_w, K, K].
    """
    if title:
        print(f"\n{title}:")
    
    lengths = tensor_view.get_tensor_descriptor().get_lengths()
    if len(lengths) != 4:
        print(f"Error: Expected 4D tensor, got {len(lengths)}D with shape {lengths}")
        return
        
    out_h, out_w, K, K2 = lengths
    if K != K2:
        print(f"Error: Expected square windows, got {K}x{K2}")
        return
        
    window_width = 3 * K + (K - 1)
    row_sep = "-" * window_width
    col_sep = " | "
    
    for window_row in range(out_h):
        for k_row in range(K):
            line_parts = []
            for window_col in range(out_w):
                window_data_parts = []
                for k_col in range(K):
                    value = tensor_view[window_row, window_col, k_row, k_col]
                    window_data_parts.append(f"{value:3.0f}")
                window_data = " ".join(window_data_parts)
                line_parts.append(window_data)
            print(col_sep.join(line_parts))
        
        if window_row < out_h - 1:
            sep_parts = [row_sep] * out_w
            sep_line = (" + ").join(sep_parts)
            print(sep_line)
```

## Basic Creation and Element Access

```{pyodide}
#| echo: true
#| output: true

from pytensor.tensor_view import make_naive_tensor_view_packed
from pytensor.tensor_coordinate import MultiIndex
import numpy as np

# Create 2D data and tensor view
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=np.float32)
tensor_view = make_naive_tensor_view_packed(data, [3, 4])  # 3x4 matrix

print(f"Data: {data}")
print(f"Tensor shape: {tensor_view.get_tensor_descriptor().get_lengths()}")
print(f"Element space size: {tensor_view.get_tensor_descriptor().get_element_space_size()}")

print_tensor(tensor_view)
```

### Element Access Methods

```{pyodide}
#| echo: true
#| output: true

print("🔍 Element Access")

# Method 1: Using MultiIndex coordinates
coord_11 = MultiIndex(2, [1, 1])
value = tensor_view.get_element(coord_11)
print(f"Element at [1,1] using MultiIndex: {value}")

# Method 2: Using array indexing syntax
value = tensor_view[1, 2]
print(f"Element at [1,2] using indexing: {value}")

# Method 3: Using linear offset
offset_value = tensor_view.get_element_by_offset(5)
print(f"Element at linear offset 5: {offset_value}")
```

### Element Modification

```{pyodide}
#| echo: true
#| output: true

print("✏️ Element Modification")

# Copy data for modification
data_copy = data.copy()
write_tensor = make_naive_tensor_view_packed(data_copy, [3, 4])
print_tensor(write_tensor, 'Before modification')


# Set using coordinates
coord = MultiIndex(2, [0, 1])
write_tensor.set_element(coord, 99.0)
print(f"After setting [0,1] to 99: {data_copy}")

# Set using indexing syntax
write_tensor[2, 3] = 88.0
print(f"After setting [2,3] to 88: {data_copy}")
print_tensor(write_tensor, 'After modification')
```

## Vectorized Operations

```{pyodide}
#| echo: true
#| output: true

print("🔄 Vectorized Get/Set Operations")

# Reset data
data_copy = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=np.float32)
vector_tensor = make_naive_tensor_view_packed(data_copy, [3, 4])

# Vectorized get: read multiple elements starting from coordinate  
from pytensor.tensor_coordinate import make_tensor_coordinate
tensor_desc = vector_tensor.get_tensor_descriptor()
coord = make_tensor_coordinate(tensor_desc, MultiIndex(2, [1, 0]))
vector_data = vector_tensor.get_vectorized_elements(coord, vector_size=3)
print(f"Vector read (3 elements from [1,0]): {vector_data}")


print_tensor(vector_tensor)

# Vectorized set: write multiple elements
new_values = np.array([100, 200, 300], dtype=np.float32)
vector_tensor.set_vectorized_elements(coord, new_values, vector_size=3)
print(f"After vector write: {data_copy}")

# Vectorized update with ADD operation
from pytensor.buffer_view import MemoryOperationEnum
vector_tensor.dst_in_mem_op = MemoryOperationEnum.ADD
add_values = np.array([10, 20, 30], dtype=np.float32)
vector_tensor.update_vectorized_elements(coord, add_values, vector_size=3)
print(f"After vector ADD: {data_copy}")
```


## Tiled Views
Behind the scenes, `make_naive_tensor_view` uses an `EmbedTransform`, which we explain in detail in the next chapter. In the meantime, we can get a taste of the power of these transformations through the `tensor_descriptor` of each tensor view. For example, just by providing additional dimensions for tile lengths, we can convert a tensor to a tiled tensor.

```{pyodide}
#| echo: true
#| output: true

print("🔲 Non-Overlapping Tiled View with TensorView")

# Create tiled view (non-overlapping 2x2 blocks)
data_6x6 = np.arange(1, 37, dtype=np.float32)
matrix_6x6 = make_naive_tensor_view_packed(data_6x6, [6, 6])
print_tensor(matrix_6x6, "Original 6×6 Matrix")

# Create non-overlapping 2x2 tiles using strides
# For 6x6 input with 2x2 tiles: out_h=3, out_w=3 (stepping by tile size)
H, W = 6, 6
tile_h, tile_w = 2, 2
out_h, out_w = H // tile_h, W // tile_w  # 3, 3

# Stride pattern for non-overlapping tiles: step by tile size
non_overlapping_tensor = make_naive_tensor_view(
    data_6x6,
    lengths=[out_h, out_w, tile_h, tile_w],  # [3, 3, 2, 2]  
    strides=[W * tile_h, tile_w, W, 1]       # [12, 2, 6, 1] - non-overlapping strides
)
print_windows_tiled(non_overlapping_tensor, "Non-Overlapping 2×2 Tiles (TensorView)")
```

## Overlapping Windows
When using `make_naive_tensor_view`, we can additionally provide `strides` parameters. These strides enable us to create overlapping tile views of our data.

```{pyodide}
#| echo: true
#| output: true

print("🔍 Overlapping Windows with TensorView")

# Create overlapping 3x3 windows from 5x5 matrix
data_5x5 = np.arange(1, 26, dtype=np.float32)
matrix_5x5 = make_naive_tensor_view_packed(data_5x5, [5, 5])
print_tensor(matrix_5x5, "Original 5×5 Matrix")

# Create overlapping 3x3 windows using strides
# For 5x5 input with 3x3 windows: out_h=3, out_w=3
H, W = 5, 5
K = 3
out_h, out_w = H - K + 1, W - K + 1  # 3, 3

# Stride pattern [W, 1, W, 1] for overlapping windows
from pytensor.tensor_view import make_naive_tensor_view
windows_tensor = make_naive_tensor_view(
    data_5x5, 
    lengths=[out_h, out_w, K, K],  # [3, 3, 3, 3]
    strides=[W, 1, W, 1]           # [5, 1, 5, 1] - overlapping strides
)
print_windows_tiled(windows_tensor, "Overlapping 3×3 Windows (TensorView)")

print("\nNotice how adjacent windows share elements - this is the basis for convolution!")
```

## Multi-Dimensional Tensors

```{pyodide}
#| echo: true
#| output: true

print("📐 Higher Dimensional Tensors")

# 3D tensor
data_3d = np.arange(1, 25, dtype=np.float32)
tensor_3d = make_naive_tensor_view_packed(data_3d, [2, 3, 4])
print(f"3D tensor shape: {tensor_3d.get_tensor_descriptor().get_lengths()}")
print(f"Element [1,2,1]: {tensor_3d[1, 2, 1]}")

# 4D tensor  
tensor_4d = make_naive_tensor_view_packed(data_3d, [2, 2, 3, 2])
print(f"4D tensor shape: {tensor_4d.get_tensor_descriptor().get_lengths()}")
print(f"Element [1,1,2,1]: {tensor_4d[1, 1, 2, 1]}")
```

## Key Features

- **Coordinate Access**: Multi-dimensional indexing with `tensor[i, j, k]` syntax
- **Vectorized Operations**: Read/write multiple elements efficiently
- **Layout Flexibility**: Same data can be viewed as different tensor shapes
- **Memory Views**: Zero-copy operations on existing BufferView data
- **Tiling Support**: Extract overlapping and non-overlapping windows
- **Higher Dimensions**: Support for tensors of any dimensionality

## What's Next

TensorView provides structured access to multi-dimensional data. Next, learn about [Tensor Adaptors](02_adaptors.qmd) which enable powerful transformations and coordinate mappings on top of TensorView. 