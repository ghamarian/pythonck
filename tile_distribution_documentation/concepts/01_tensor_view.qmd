---
title: "Tensor Views - Multi-Dimensional Structure"
format: live-html
---

## Overview

TensorView adds multi-dimensional structure to raw memory. While BufferView gives us access to a chunk of memory, TensorView lets us interpret that memory as matrices, tensors, and other multi-dimensional data structures.

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

## TensorView Creation

Let's create our first TensorView and see how it structures raw memory:

```{pyodide}
#| echo: true
#| output: true

# Import required modules
from pytensor.buffer_view import make_buffer_view
from pytensor.tensor_view import (
    TensorView,
    make_tensor_view,
    make_naive_tensor_view,
    make_naive_tensor_view_packed,
    transform_tensor_view
)
from pytensor.tensor_descriptor import (
    make_naive_tensor_descriptor,
    make_naive_tensor_descriptor_packed
)
from pytensor.tensor_coordinate import MultiIndex
import numpy as np

print("1Ô∏è‚É£ Creating TensorView objects")
print("--" * 25)

# Create buffer data
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=np.float32)
buffer_view = make_buffer_view(data, len(data))
print(f"  Buffer data: {data}")

# Create tensor descriptor for 2D view (3x4)
tensor_desc = make_naive_tensor_descriptor_packed([3, 4])
print(f"  Tensor dimensions: {tensor_desc.get_lengths()}")
print(f"  Element space size: {tensor_desc.get_element_space_size()}")

# Create tensor view
tensor_view = make_tensor_view(data, tensor_desc)
print(f"  TensorView created: {type(tensor_view).__name__}")
```

## TensorView Properties

Now let's explore the properties and methods available on TensorView objects:

```{pyodide}
#| echo: true
#| output: true

print("2Ô∏è‚É£ TensorView properties")
print("--" * 25)

data = np.array(range(24), dtype=np.float32)
tensor_desc = make_naive_tensor_descriptor_packed([4, 6])
tensor_view = make_tensor_view(data, tensor_desc)

print(f"  Number of dimensions: {tensor_view.get_num_of_dimension()}")
print(f"  Tensor lengths: {tensor_view.get_tensor_descriptor().get_lengths()}")
print(f"  Element space size: {tensor_view.get_tensor_descriptor().get_element_space_size()}")
print(f"  Is static: {tensor_view.get_tensor_descriptor().is_static()}")
```

## Coordinate Access

TensorView provides structured access using multi-dimensional coordinates:

```{pyodide}
#| echo: true
#| output: true

print("3Ô∏è‚É£ Tensor coordinate access")
print("--" * 25)

data = np.array([10, 20, 30, 40, 50, 60], dtype=np.float32)
tensor_desc = make_naive_tensor_descriptor_packed([2, 3])
tensor_view = make_tensor_view(data, tensor_desc)

# Access elements using coordinates
coord_00 = MultiIndex(2, [0, 0])
coord_12 = MultiIndex(2, [1, 2])

print(f"  Element at [0,0]: {tensor_view.get_element(coord_00)}")
print(f"  Element at [1,2]: {tensor_view.get_element(coord_12)}")

# Modify elements
tensor_view.set_element(coord_00, 999.0)
print(f"  After setting [0,0] to 999: {tensor_view.get_element(coord_00)}")
print(f"  Original data after modification: {data}")
```

## Packed Tensor Views

Packed tensor views provide convenient ways to create common layouts:

```{pyodide}
#| echo: true
#| output: true

print("4Ô∏è‚É£ Packed tensor view")
print("--" * 25)

data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)

# Create packed tensor view (row-major layout)
tensor_view = make_naive_tensor_view_packed(data, [2, 4])

print(f"  Packed tensor dimensions: {tensor_view.get_num_of_dimension()}")
print(f"  Packed tensor lengths: {tensor_view.get_tensor_descriptor().get_lengths()}")

# Test coordinate access
coords_to_test = [(0, 0), (0, 3), (1, 0), (1, 3)]
for row, col in coords_to_test:
    coord = MultiIndex(2, [row, col])
    value = tensor_view.get_element(coord)
    print(f"  Element at [{row},{col}]: {value}")
```

## Different Memory Layouts

The same raw data can be interpreted in different ways depending on the tensor shape:

```{pyodide}
#| echo: true
#| output: true

print("5Ô∏è‚É£ Different tensor layouts")
print("--" * 25)

# Same data, different shapes
data = np.array(range(12), dtype=np.float32)
print(f"  Raw data: {data}")

# 3x4 layout
tensor_3x4 = make_naive_tensor_view_packed(data, [3, 4])
print(f"  As 3√ó4 matrix: {tensor_3x4.get_tensor_descriptor().get_lengths()}")

# 4x3 layout  
tensor_4x3 = make_naive_tensor_view_packed(data, [4, 3])
print(f"  As 4√ó3 matrix: {tensor_4x3.get_tensor_descriptor().get_lengths()}")

# 2x6 layout
tensor_2x6 = make_naive_tensor_view_packed(data, [2, 6])
print(f"  As 2√ó6 matrix: {tensor_2x6.get_tensor_descriptor().get_lengths()}")

# Access same data through different layouts
coord = MultiIndex(2, [0, 2])
print(f"  Element [0,2] in 3√ó4: {tensor_3x4.get_element(coord)}")
print(f"  Element [0,2] in 4√ó3: {tensor_4x3.get_element(coord)}")
print(f"  Element [0,2] in 2√ó6: {tensor_2x6.get_element(coord)}")
```

## Multi-Dimensional Tensors

TensorView supports tensors of any dimensionality:

```{pyodide}
#| echo: true
#| output: true

print("6Ô∏è‚É£ Multi-dimensional tensor views")
print("--" * 25)

data = np.array(range(24), dtype=np.float32)

# Create 3D tensor view
tensor_view_3d = make_naive_tensor_view_packed(data, [2, 3, 4])
print(f"  3D tensor shape: {tensor_view_3d.get_tensor_descriptor().get_lengths()}")

# Create 4D tensor view
tensor_view_4d = make_naive_tensor_view_packed(data, [2, 2, 3, 2])
print(f"  4D tensor shape: {tensor_view_4d.get_tensor_descriptor().get_lengths()}")

# Access 3D element
coord_3d = MultiIndex(3, [1, 2, 1])
value_3d = tensor_view_3d.get_element(coord_3d)
print(f"  3D element at [1,2,1]: {value_3d}")

# Access 4D element  
coord_4d = MultiIndex(4, [1, 1, 2, 1])
value_4d = tensor_view_4d.get_element(coord_4d)
print(f"  4D element at [1,1,2,1]: {value_4d}")
```

## Testing Your Understanding

Let's verify that TensorView operations work correctly:

```{pyodide}
#| echo: true
#| output: true

print("7Ô∏è‚É£ Testing TensorView operations")
print("--" * 25)

def test_creation():
    data = np.array([1, 2, 3, 4], dtype=np.float32)
    tensor_view = make_naive_tensor_view_packed(data, [2, 2])
    return tensor_view.get_num_of_dimension() == 2

def test_coordinate_access():
    data = np.array([10, 20, 30, 40], dtype=np.float32)
    tensor_view = make_naive_tensor_view_packed(data, [2, 2])
    coord = MultiIndex(2, [1, 1])
    return tensor_view.get_element(coord) == 40.0

def test_modification():
    data = np.array([1, 2, 3, 4], dtype=np.float32)
    tensor_view = make_naive_tensor_view_packed(data, [2, 2])
    coord = MultiIndex(2, [0, 0])
    tensor_view.set_element(coord, 999.0)
    return tensor_view.get_element(coord) == 999.0

tests = [
    ("TensorView creation", test_creation),
    ("Coordinate access", test_coordinate_access),
    ("Element modification", test_modification)
]

all_tests_passed = True
for test_name, test_func in tests:
    try:
        result = test_func()
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status}: {test_name}")
        if not result:
            all_tests_passed = False
    except Exception as e:
        print(f"  ‚ùå ERROR: {test_name} - {e}")
        all_tests_passed = False

print(f"\n{'üéâ All tests passed!' if all_tests_passed else '‚ö†Ô∏è Some tests failed.'}")
```

## Key Concepts Demonstrated

Through these examples, you've learned:

1. **Multi-Dimensional Structure**: How TensorView adds shape to raw memory
2. **Coordinate Systems**: Using MultiIndex for structured element access
3. **Memory Layouts**: Different ways to interpret the same raw data
4. **Transformations**: How to reshape and manipulate tensor views
5. **Higher Dimensions**: Working with 3D, 4D, and higher-dimensional tensors

## Common Use Cases

TensorView is used throughout Composable Kernels for:

1. **Matrix Operations**: 2D tensor views for linear algebra
2. **Convolution**: 4D tensor views for feature maps [batch, channels, height, width]
3. **Sequence Processing**: 3D tensor views for [batch, sequence, features]
4. **Data Reshaping**: Transforming data layouts for different operations

## Key Takeaways

- **Structured Memory Access**: TensorView provides multi-dimensional indexing on raw memory
- **Zero-Copy Operations**: TensorView wraps existing BufferView data without copying
- **Flexible Layouts**: Supports row-major, column-major, and custom memory arrangements
- **Coordinate Mapping**: Provides efficient mapping from logical coordinates to memory addresses
- **GPU-Optimized**: Designed for efficient GPU memory access patterns

## What's Next

Now that you understand both raw memory (BufferView) and structured data (TensorView), you're ready to learn about the transformation engine that makes complex tensor operations possible: **The Transformation Engine - Coordinate Magic**.

The transformation engine will show you how to manipulate tensor layouts, combine multiple tensors, and create complex memory access patterns‚Äîall building on the TensorView foundation you've just mastered.

## Next Steps

Continue to [Transforms](02_transforms.qmd) to learn how to manipulate and transform tensor layouts. 