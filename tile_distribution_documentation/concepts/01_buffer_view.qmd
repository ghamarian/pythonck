---
title: "Buffer Views - Raw Memory Access"
format: live-html
---

## Overview

BufferView provides structured access to raw memory regions for GPU kernels. It handles different memory address spaces (global, shared, register) with support for vectorized operations.

- Handles out-of-bounds access safely with configurable invalid values
- Supports both scalar and vector data types
- Implements AMD GPU-specific optimizations (buffer addressing, atomic operations)
- Manages memory coherence and caching policies

```{pyodide}
#| echo: false
#| output: false
#| autorun: true

# Auto-install pythonck package
import micropip
await micropip.install("https://raw.githubusercontent.com/ghamarian/pythonck/master/documentation/pythonck-0.1.0-py3-none-any.whl")
```

## Basic Creation

Out-of-Bounds Handling:

- Zero Value Mode: Returns numerical zero for invalid accesses
- Custom Value Mode: Returns user-specified invalid value


```{pyodide}
#| echo: true
#| output: true

from pytensor.buffer_view import (
    BufferView, AddressSpaceEnum, MemoryOperationEnum, make_buffer_view
)
import numpy as np

# Create data and buffer view
data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)
buffer_view = make_buffer_view(data, len(data), AddressSpaceEnum.GLOBAL)

print(f"Buffer size: {buffer_view.buffer_size}")
print(f"Address space: {buffer_view.address_space.name}")
print(f"Data: {data}")
```

### Zero Value Mode
```cpp
// Basic buffer view creation with automatic zero for invalid elements
void basic_creation_example() {
    // Create data array
    constexpr size_t buffer_size = 8;
    float data[buffer_size] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f};
    
    // Create global memory buffer view
    auto buffer_view = make_buffer_view<address_space_enum::global>(data, buffer_size);
}
```

### Custom Value Mode
```cpp
void custom_invalid_value_example() {
    constexpr size_t buffer_size = 8;
    float data[buffer_size] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f};
    float custom_invalid = 13.0f;
    
    // Create buffer view with custom invalid value
    auto buffer_view = make_buffer_view<address_space_enum::global>(
        data, buffer_size, custom_invalid);
}
```

## Get Operations

### Scalar Access

```{pyodide}
#| echo: true
#| output: true

print("üîç Scalar Get Operations")

# Basic get: get(index, linear_offset, is_valid_element)
value = buffer_view.get(0, 2, True)  # Gets element at position 0+2=2
print(f"Element at index 2: {value}")

# Invalid element access
invalid_value = buffer_view.get(0, 0, False)  # Invalid access returns 0
print(f"Invalid element: {invalid_value}")

# Out of bounds access
oob_value = buffer_view.get(0, 100, True)  # Beyond buffer size
print(f"Out of bounds: {oob_value}")
```

### Vector Access

```{pyodide}
#| echo: true
#| output: true

print("üîç Vector Get Operations")

# Vector get: specify vector_size > 1
vector = buffer_view.get(0, 1, True, vector_size=3)  # Gets 3 elements starting at index 1
print(f"Vector read (3 elements from index 1): {vector}")

# Vector read at boundary
boundary_vector = buffer_view.get(0, 6, True, vector_size=4)  # Partially out of bounds
print(f"Boundary vector read: {boundary_vector}")
```

## Set Operations

### Scalar Writes

```{pyodide}
#| echo: true
#| output: true

print("‚úèÔ∏è Scalar Set Operations")

# Create a copy for modification
data_copy = data.copy()
write_buffer = make_buffer_view(data_copy, len(data_copy))

print(f"Original: {data_copy}")

# Basic set: set(index, linear_offset, is_valid_element, value)
write_buffer.set(0, 2, True, 99.0)  # Set element at position 2
print(f"After setting index 2 to 99: {data_copy}")

# Invalid write (ignored)
write_buffer.set(0, 3, False, 777.0)  # Invalid write - ignored
print(f"After invalid write: {data_copy}")
```

### Vector Writes

```{pyodide}
#| echo: true
#| output: true

print("‚úèÔ∏è Vector Set Operations")

# Reset data
data_copy = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)
write_buffer = make_buffer_view(data_copy, len(data_copy))

print(f"Original: {data_copy}")

# Vector set: set with vector_size > 1
new_values = np.array([10, 20, 30], dtype=np.float32)
write_buffer.set(0, 1, True, new_values, vector_size=3)
print(f"After vector write: {data_copy}")
```

## Update Operations

### Memory Operation Types

```{pyodide}
#| echo: true
#| output: true

print("üîÑ Update Operations")

# Reset data
data_copy = np.array([1, 2, 3, 4, 5], dtype=np.float32)
update_buffer = make_buffer_view(data_copy, len(data_copy))

print(f"Original: {data_copy}")

# ADD operation
update_buffer.update(MemoryOperationEnum.ADD, 0, 0, True, 10.0)
print(f"After ADD 10 to index 0: {data_copy}")

# ATOMIC_MAX operation  
update_buffer.update(MemoryOperationEnum.ATOMIC_MAX, 0, 1, True, 15.0)
print(f"After ATOMIC_MAX with 15 at index 1: {data_copy}")

# SET operation (same as set method)
update_buffer.update(MemoryOperationEnum.SET, 0, 2, True, 100.0)
print(f"After SET 100 at index 2: {data_copy}")
```

### Vector Updates

```{pyodide}
#| echo: true
#| output: true

print("üîÑ Vector Update Operations")

# Reset data
data_copy = np.array([1, 2, 3, 4, 5, 6], dtype=np.float32)
update_buffer = make_buffer_view(data_copy, len(data_copy))

print(f"Original: {data_copy}")

# Vector ADD
add_values = np.array([10, 20, 30], dtype=np.float32)
update_buffer.update(MemoryOperationEnum.ADD, 0, 1, True, add_values, vector_size=3)
print(f"After vector ADD: {data_copy}")

# Vector ATOMIC_MAX
max_values = np.array([15, 25, 5], dtype=np.float32) 
update_buffer.update(MemoryOperationEnum.ATOMIC_MAX, 0, 1, True, max_values, vector_size=3)
print(f"After vector ATOMIC_MAX: {data_copy}")
```

## Address Spaces

Different memory types have different performance characteristics:

```{pyodide}
#| echo: true
#| output: true

print("üè† Address Space Examples")

data = np.array([1, 2, 3, 4], dtype=np.float32)

# Different address spaces
spaces = [
    (AddressSpaceEnum.GLOBAL, "Main GPU memory"),
    (AddressSpaceEnum.LDS, "Local Data Share (fast)"),
    (AddressSpaceEnum.VGPR, "Vector registers (fastest)"),
    (AddressSpaceEnum.GENERIC, "Generic addressing")
]

for space, description in spaces:
    buffer_view = make_buffer_view(data, len(data), space)
    print(f"  {space.name}: {description}")
```

## Key Features

- **Vectorized Operations**: Read/write multiple elements with `vector_size` parameter
- **Validity Checking**: `is_valid_element` controls whether operations execute
- **Bounds Checking**: Automatic handling of out-of-bounds access
- **Multiple Operations**: SET, ADD, ATOMIC_ADD, ATOMIC_MAX support
- **Address Space Aware**: Optimized for different GPU memory types

## What's Next

BufferView provides the foundation for raw memory access. Next, learn about [TensorView](01_tensor_view.qmd) which adds multi-dimensional structure and coordinate systems on top of BufferView. 